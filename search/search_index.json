{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Quickly build web UIs in Python                Used at Google for rapid internal app development        <p>Mesop is a Python-based UI framework that allows you to rapidly build web apps like demos and internal apps:</p> Easy to get started <ul> <li>Write UI in idiomatic Python code</li> <li>Skip the FE learning curve.</li> <li>Ready to use components (e.g. chat)</li> </ul> Fast iteration <ul> <li>Hot reload so the browser automatically reloads and preserves state</li> <li>Rich IDE support with strong type safety</li> </ul> Flexible &amp; composable <ul> <li>Build custom UIs without writing Javascript/CSS/HTML</li> <li>Compose your UI into components, which are just Python functions</li> </ul>  See what you can build in less than 10 lines of code...  <p>Check out how the above demo gallery was built in pure Mesop!</p>"},{"location":"#try-it","title":"Try it","text":""},{"location":"#colab","title":"Colab","text":"<p>Try Mesop on Colab: </p>"},{"location":"#locally","title":"Locally","text":"<p>Step 1: Install it</p> <pre><code>$ pip install mesop\n</code></pre> <p>Step 2: Copy the example above into <code>main.py</code></p> <p>Step 3: Run the app</p> <pre><code>$ mesop main.py\n</code></pre>"},{"location":"#next-steps","title":"Next Steps","text":"<p>Learn more in Getting Started.</p>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>This is not an officially supported Google product.</p>"},{"location":"demo/","title":"Demo Gallery \ud83d\udd17","text":"<p>hide:   - navigation   - toc</p> <p></p>"},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"faq/#general","title":"General","text":""},{"location":"faq/#what-kinds-of-apps-is-mesop-suited-for","title":"What kinds of apps is Mesop suited for?","text":"<p>Mesop is well-suited for ML/AI demos and internal tools because it enables developers without frontend experience to quickly build web apps. For use cases that prioritize developer experience and velocity, Mesop can be a good choice.</p> <p>Demanding consumer-facing apps, which have strict requirements in terms of performance, custom UI components, and i18n/localization would not be a good fit for Mesop and other UI frameworks may be more suitable.</p>"},{"location":"faq/#how-does-mesop-compare-to-other-python-ui-frameworks","title":"How does Mesop compare to other Python UI frameworks?","text":"<p>Because every Python UI framework has a differnet set of trade-offs, I recommend reading Mesop's philosophy for building UIs.</p>"},{"location":"faq/#is-mesop-production-ready","title":"Is Mesop production-ready?","text":"<p>Dozens of teams at Google have used Mesop to build demos and internal apps.</p> <p>Although Mesop is pre-v1, we take backwards-compatibilty seriously and avoid backwards incompatible change. This is critical to us because many teams within Google rely on Mesop and we need to not break them.</p> <p>Occasionally, we will do minor clean-up for our APIs, but we will provide warnings/deprecation notices and provide at least 1 release to migrate to the newer APIs.</p>"},{"location":"faq/#is-mesop-an-official-google-product","title":"Is Mesop an official Google product?","text":"<p>No, Mesop is not an official Google product and Mesop is a 20% project maintained by a small core team of Google engineers with contributions from the broader community.</p>"},{"location":"faq/#deployment","title":"Deployment","text":""},{"location":"faq/#how-do-i-share-or-deploy-my-mesop-app","title":"How do I share or deploy my Mesop app?","text":"<p>The best way to share your Mesop app is to deploy it to a cloud service. You can follow our deployment guide for step-by-step instructions to deploy to Google Cloud Run.</p> <p>Note: you should be able to deploy Mesop on any cloud service that takes a container. Please read the above deployment guide as it should be similar steps.</p>"},{"location":"goals/","title":"Goals","text":"<p>I think it's helpful to explicitly state the goals of a project because it provides clarity for not only the development team, but also developers who are evaluating Mesop amongst other options:</p> <ol> <li>Prioritize Python developer experience - Provide the best possible developer experience for Python engineers with minimal frontend experience. Traditional web UI frameworks (e.g. React) prioritize developer experience, but they are focused on web developers who are familiar with the web ecosystem (e.g. HTML, node.js, etc.).</li> <li>Rich user interactions - You should be able to build reasonably sophisticated web applications and demos (e.g. LLM chat) without building custom native components.</li> <li>Simple deployment - Make deployment simple by packaging Mesop into a container which can be deployed as a standalone server.</li> </ol>"},{"location":"goals/#examples-of-applying-these-goals","title":"Examples of applying these goals","text":"<ul> <li> <p>Web performance: This doesn't mean other goals like web performance have no weight, but we will consistently rank these goals as higher priorities. For example, we could improve performance by serving static assets via CDN, but this would complicate our deployment. For instance, we'd need to ensure that pushing a new Python server binary and JS static assets happened at the same time, or you can get version skews which can cause cryptic errors.</p> </li> <li> <p>Template vs. code: Mesop adopts the pattern of UI-as-code instead of using a separate templating language. Our belief is that writing Python code is a significantly better learning curve for our target developers. Rather than making them learn a new templating language (DSL) that they are unfamiliar with, they can write Python code which allows them idiomatic ways of expressing conditional logic and looping.</p> </li> </ul>"},{"location":"api/page/","title":"Page API","text":""},{"location":"api/page/#overview","title":"Overview","text":"<p>Pages allow you to build multi-page applications by decorating Python functions with <code>me.page</code>. To learn more, read the see multi-pages guide.</p>"},{"location":"api/page/#examples","title":"Examples","text":""},{"location":"api/page/#simple-1-page-setup","title":"Simple, 1-page setup","text":"<p>To create a simple Mesop app, you can use <code>me.page()</code> like this:</p> <pre><code>import mesop as me\n\n@me.page()\ndef foo():\n    me.text(\"bar\")\n</code></pre> <p>NOTE: If you do not provide a <code>path</code> argument, then it defaults to the root path <code>\"/\"</code>.</p>"},{"location":"api/page/#explicit-1-page-setup","title":"Explicit 1-page setup","text":"<p>This is the same as the above example which explicitly sets the route to <code>\"/\"</code>.</p> <pre><code>import mesop as me\n\n@me.page(path=\"/\")\ndef foo():\n    me.text(\"bar\")\n</code></pre>"},{"location":"api/page/#api","title":"API","text":""},{"location":"api/page/#mesop.features.page.page","title":"<code>page</code>","text":"<p>Defines a page in a Mesop application.</p> <p>This function is used as a decorator to register a function as a page in a Mesop app.</p> PARAMETER DESCRIPTION <code>path</code> <p>The URL path for the page. Defaults to \"/\".</p> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>title</code> <p>The title of the page. If None, a default title is generated.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>stylesheets</code> <p>List of stylesheet URLs to load.</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> <code>security_policy</code> <p>The security policy for the page. If None, a default strict security policy is used.</p> <p> TYPE: <code>SecurityPolicy | None</code> DEFAULT: <code>None</code> </p> <code>on_load</code> <p>An optional event handler to be called when the page is loaded.</p> <p> TYPE: <code>OnLoadHandler | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Callable[[Callable[[], None]], Callable[[], None]]</code> <p>A decorator that registers the decorated function as a page.</p>"},{"location":"api/page/#mesop.events.events.LoadEvent","title":"<code>LoadEvent</code>  <code>dataclass</code>","text":"<p>Represents a page load event.</p> ATTRIBUTE DESCRIPTION <code>path</code> <p>The path loaded</p> <p> TYPE: <code>str</code> </p>"},{"location":"api/page/#on_load","title":"<code>on_load</code>","text":"<p>You may want to do some sort of data-processing when a page is first loaded in a session.</p>"},{"location":"api/page/#simple-handler","title":"Simple handler","text":"<p>An <code>on_load</code> handler is similar to a regular event handler where you can mutate state.</p> <pre><code>import time\n\nimport mesop as me\n\n\ndef fake_api():\n  yield 1\n  time.sleep(1)\n  yield 2\n  time.sleep(2)\n  yield 3\n\n\ndef on_load(e: me.LoadEvent):\n  for val in fake_api():\n    me.state(State).default_values.append(val)\n    yield\n\n\n@me.page(path=\"/docs/on_load\", on_load=on_load)\ndef app():\n  me.text(\"onload\")\n  me.text(str(me.state(State).default_values))\n\n\n@me.stateclass\nclass State:\n  default_values: list[int]\n</code></pre>"},{"location":"api/page/#generator-handler","title":"Generator handler","text":"<p>The <code>on_load</code> handler can also be a generator function. This is useful if you need to call a slow or streaming API and want to return intermediate results before all the data has been received.</p> <pre><code>import time\n\nimport mesop as me\n\n\ndef on_load(e: me.LoadEvent):\n  state = me.state(State)\n  state.default_values.append(\"a\")\n  yield\n  time.sleep(1)\n  state.default_values.append(\"b\")\n  yield\n\n\n@me.page(path=\"/docs/on_load_generator\", on_load=on_load)\ndef app():\n  me.text(\"onload\")\n  me.text(str(me.state(State).default_values))\n\n\n@me.stateclass\nclass State:\n  default_values: list[str]\n</code></pre>"},{"location":"api/style/","title":"Style","text":""},{"location":"api/style/#overview","title":"Overview","text":"<p>Mesop provides a Python API that wraps the browser's native CSS style API.</p>"},{"location":"api/style/#api","title":"API","text":""},{"location":"api/style/#mesop.component_helpers.style.Style","title":"<code>Style</code>  <code>dataclass</code>","text":"<p>Represents the style configuration for a UI component.</p> ATTRIBUTE DESCRIPTION <code>align_content</code> <p>Aligns the flexible container's items on the cross-axis. See MDN doc.</p> <p> TYPE: <code>ContentAlignmentValues | None</code> </p> <code>align_items</code> <p>Specifies the default alignment for items inside a flexible container. See MDN doc.</p> <p> TYPE: <code>ItemAlignmentValues | None</code> </p> <code>align_self</code> <p>Overrides a grid or flex item's align-items value. In Grid, it aligns the item inside the grid area. In Flexbox, it aligns the item on the cross axis. See MDN doc.</p> <p> TYPE: <code>ItemAlignmentValues | None</code> </p> <code>aspect_ratio</code> <p>Specifies the desired width-to-height ratio of a component. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>background</code> <p>Sets the background color or image of the component. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>border</code> <p>Defines the border properties for each side of the component. See MDN doc.</p> <p> TYPE: <code>Border | None</code> </p> <code>border_radius</code> <p>Defines the border radius. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>bottom</code> <p>Helps set vertical position of a positioned element. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>box_shadow</code> <p>Defines the box shadow. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>box_sizing</code> <p>Defines the box sizing. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>color</code> <p>Sets the color of the text inside the component. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>column_gap</code> <p>Sets the gap between columns. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>columns</code> <p>Specifies the number of columns in a multi-column element. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>cursor</code> <p>Sets the mouse cursor. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>display</code> <p>Defines the display type of the component. See MDN doc.</p> <p> TYPE: <code>Literal['block', 'inline', 'inline-block', 'flex', 'inline-flex', 'grid', 'inline-grid', 'none', 'contents'] | None</code> </p> <code>flex_basis</code> <p>Specifies the initial length of a flexible item. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>flex_direction</code> <p>Establishes the main-axis, thus defining the direction flex items are placed in the flex container. See MDN doc.</p> <p> TYPE: <code>Literal['row', 'row-reverse', 'column', 'column-reverse'] | None</code> </p> <code>flex_grow</code> <p>Defines the ability for a flex item to grow if necessary. See MDN doc.</p> <p> TYPE: <code>int | None</code> </p> <code>flex_shrink</code> <p>Defines the ability for a flex item to shrink if necessary. See MDN doc.</p> <p> TYPE: <code>int | None</code> </p> <code>flex_wrap</code> <p>Allows flex items to wrap onto multiple lines. See MDN doc.</p> <p> TYPE: <code>Literal['nowrap', 'wrap', 'wrap-reverse'] | None</code> </p> <code>font_family</code> <p>Specifies the font family. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>font_size</code> <p>Sets the size of the font. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>font_style</code> <p>Specifies the font style for text. See MDN doc.</p> <p> TYPE: <code>Literal['italic', 'normal'] | None</code> </p> <code>font_weight</code> <p>Sets the weight (or boldness) of the font. See MDN doc.</p> <p> TYPE: <code>Literal['bold', 'normal', 100, 200, 300, 400, 500, 600, 700, 800, 900] | None</code> </p> <code>gap</code> <p>Sets the gap. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>grid_area</code> <p>Sets the grid area. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>grid_auto_columns</code> <p>CSS property specifies the size of an implicitly-created grid column track or pattern of tracks. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>grid_auto_flow</code> <p>CSS property controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>grid_auto_rows</code> <p>CSS property specifies the size of an implicitly-created grid row track or pattern of tracks. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>grid_column</code> <p>CSS shorthand property specifies a grid item's size and location within a grid column. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>grid_column_start</code> <p>Sets the grid column start. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>grid_column_end</code> <p>Sets the grid column end. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>grid_row</code> <p>CSS shorthand property specifies a grid item's size and location within a grid row. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>grid_row_start</code> <p>Sets the grid row start. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>grid_row_end</code> <p>Sets the grid row end. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>grid_template_areas</code> <p>Sets the grid template areas; each element is a row. See MDN doc.</p> <p> TYPE: <code>list[str] | None</code> </p> <code>grid_template_columns</code> <p>Sets the grid template columns. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>grid_template_rows</code> <p>Sets the grid template rows. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>height</code> <p>Sets the height of the component. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>justify_content</code> <p>Aligns the flexible container's items on the main-axis. See MDN doc.</p> <p> TYPE: <code>ContentAlignmentValues | None</code> </p> <code>justify_items</code> <p>Defines the default justify-self for all items of the box, giving them all a default way of justifying each box along the appropriate axis. See MDN doc.</p> <p> TYPE: <code>ItemJustifyValues | None</code> </p> <code>justify_self</code> <p>Sets the way a box is justified inside its alignment container along the appropriate axis. See MDN doc.</p> <p> TYPE: <code>ItemJustifyValues | None</code> </p> <code>left</code> <p>Helps set horizontal position of a positioned element. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>letter_spacing</code> <p>Increases or decreases the space between characters in text. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>line</code> <p>Set the line height (relative to the font size). See MDN doc.</p> <p> TYPE: <code>height</code> </p> <code>margin</code> <p>Sets the margin space required on each side of an element. See MDN doc.</p> <p> TYPE: <code>Margin | None</code> </p> <code>opacity</code> <p>Sets the opacity property. See MDN doc.</p> <p> TYPE: <code>float | str | None</code> </p> <code>outline</code> <p>Sets the outline property. Note: <code>input</code> component has default browser stylings. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>overflow_wrap</code> <p>Specifies how long text can be broken up by new lines to prevent overflowing. See MDN doc.</p> <p> TYPE: <code>OverflowWrapValues | None</code> </p> <code>overflow_x</code> <p>Specifies the handling of overflow in the horizontal direction. See MDN doc.</p> <p> TYPE: <code>OverflowValues | None</code> </p> <code>overflow_y</code> <p>Specifies the handling of overflow in the vertical direction. See MDN doc.</p> <p> TYPE: <code>OverflowValues | None</code> </p> <code>padding</code> <p>Sets the padding space required on each side of an element. See MDN doc.</p> <p> TYPE: <code>Padding | None</code> </p> <code>position</code> <p>Specifies the type of positioning method used for an element (static, relative, absolute, fixed, or sticky). See MDN doc.</p> <p> TYPE: <code>Literal['static', 'relative', 'absolute', 'fixed', 'sticky'] | None</code> </p> <code>right</code> <p>Helps set horizontal position of a positioned element. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>rotate</code> <p>Allows you to specify rotation transforms individually and independently of the transform property. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>row_gap</code> <p>Sets the gap between rows. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>text_align</code> <p>Specifies the horizontal alignment of text in an element. See MDN doc.</p> <p> TYPE: <code>Literal['start', 'end', 'left', 'right', 'center'] | None</code> </p> <code>text_decoration</code> <p>Specifies the decoration added to text. See MDN doc.</p> <p> TYPE: <code>Literal['underline', 'none'] | None</code> </p> <code>text_overflow</code> <p>Specifies how overflowed content that is not displayed should be signaled to the user. See MDN doc.</p> <p> TYPE: <code>Literal['ellipsis', 'clip'] | None</code> </p> <code>top</code> <p>Helps set vertical position of a positioned element. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>transform</code> <p>Lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>visibility</code> <p>Sets the visibility property. See MDN doc.</p> <p> TYPE: <code>Literal['visible', 'hidden', 'collapse', 'inherit', 'initial', 'revert', 'revert-layer', 'unset'] | None</code> </p> <code>white_space</code> <p>Specifies how white space inside an element is handled. See MDN doc.</p> <p> TYPE: <code>Literal['normal', 'nowrap', 'pre', 'pre-wrap', 'pre-line', 'break-spaces'] | None</code> </p> <code>width</code> <p>Sets the width of the component. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>z-index</code> <p>Sets the z-index of the component. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p>"},{"location":"api/style/#mesop.component_helpers.style.Border","title":"<code>Border</code>  <code>dataclass</code>","text":"<p>Defines the border styles for each side of a UI component.</p> ATTRIBUTE DESCRIPTION <code>top</code> <p>Style for the top border.</p> <p> TYPE: <code>BorderSide | None</code> </p> <code>right</code> <p>Style for the right border.</p> <p> TYPE: <code>BorderSide | None</code> </p> <code>bottom</code> <p>Style for the bottom border.</p> <p> TYPE: <code>BorderSide | None</code> </p> <code>left</code> <p>Style for the left border.</p> <p> TYPE: <code>BorderSide | None</code> </p>"},{"location":"api/style/#mesop.component_helpers.style.Border.all","title":"<code>all</code>  <code>staticmethod</code>","text":"<p>Creates a Border instance with all sides having the same style.</p> PARAMETER DESCRIPTION <code>value</code> <p>The style to apply to all sides of the border.</p> <p> TYPE: <code>BorderSide</code> </p> RETURNS DESCRIPTION <code>Border</code> <p>A new Border instance with the specified style applied to all sides.</p> <p> TYPE: <code>Border</code> </p>"},{"location":"api/style/#mesop.component_helpers.style.Border.symmetric","title":"<code>symmetric</code>  <code>staticmethod</code>","text":"<p>Creates a Border instance with symmetric styles for vertical and horizontal sides.</p> PARAMETER DESCRIPTION <code>vertical</code> <p>The style to apply to the top and bottom sides of the border.</p> <p> TYPE: <code>BorderSide | None</code> DEFAULT: <code>None</code> </p> <code>horizontal</code> <p>The style to apply to the right and left sides of the border.</p> <p> TYPE: <code>BorderSide | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Border</code> <p>A new Border instance with the specified styles applied symmetrically.</p> <p> TYPE: <code>Border</code> </p>"},{"location":"api/style/#mesop.component_helpers.style.BorderSide","title":"<code>BorderSide</code>  <code>dataclass</code>","text":"<p>Represents the style of a single side of a border in a UI component.</p> ATTRIBUTE DESCRIPTION <code>width</code> <p>The width of the border. Can be specified as an integer value representing pixels,                       a string with a unit (e.g., '2em'), or None for no width.</p> <p> TYPE: <code>int | str | None</code> </p> <code>color</code> <p>The color of the border, represented as a string. This can be any valid CSS color value,                 or None for no color.</p> <p> TYPE: <code>str | None</code> </p> <code>style</code> <p>The style of the border, which can be 'none' for no border, 'solid' for a solid line.</p> <p> TYPE: <code>Literal['none', 'solid'] | None</code> </p>"},{"location":"api/style/#mesop.component_helpers.style.Margin","title":"<code>Margin</code>  <code>dataclass</code>","text":"<p>               Bases: <code>_EdgeInsets</code></p> <p>Defines the margin space around a UI component.</p> ATTRIBUTE DESCRIPTION <code>top</code> <p>Top margin (note: <code>2</code> is the same as <code>2px</code>)</p> <p> TYPE: <code>int | str | None</code> </p> <code>right</code> <p>Right margin</p> <p> TYPE: <code>int | str | None</code> </p> <code>bottom</code> <p>Bottom margin</p> <p> TYPE: <code>int | str | None</code> </p> <code>left</code> <p>Left margin</p> <p> TYPE: <code>int | str | None</code> </p>"},{"location":"api/style/#mesop.component_helpers.style.Margin.all","title":"<code>all</code>  <code>staticmethod</code>","text":"<p>Creates a Margin instance with the same value for all sides.</p> PARAMETER DESCRIPTION <code>value</code> <p>The value to apply to all sides of the margin. Can be an integer (pixel value) or a string.</p> <p> TYPE: <code>int | str</code> </p> RETURNS DESCRIPTION <code>Margin</code> <p>A new Margin instance with the specified value applied to all sides.</p> <p> TYPE: <code>Margin</code> </p>"},{"location":"api/style/#mesop.component_helpers.style.Margin.symmetric","title":"<code>symmetric</code>  <code>staticmethod</code>","text":"<p>Creates a Margin instance with symmetric values for vertical and horizontal sides.</p> PARAMETER DESCRIPTION <code>vertical</code> <p>The value to apply to the top and bottom sides of the margin. Can be an integer (pixel value) or a string.</p> <p> TYPE: <code>int | str | None</code> DEFAULT: <code>None</code> </p> <code>horizontal</code> <p>The value to apply to the right and left sides of the margin. Can be an integer (pixel value) or a string.</p> <p> TYPE: <code>int | str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Margin</code> <p>A new Margin instance with the specified values applied to the vertical and horizontal sides.</p> <p> TYPE: <code>Margin</code> </p>"},{"location":"api/style/#mesop.component_helpers.style.Padding","title":"<code>Padding</code>  <code>dataclass</code>","text":"<p>               Bases: <code>_EdgeInsets</code></p> <p>Defines the padding space around a UI component.</p> ATTRIBUTE DESCRIPTION <code>top</code> <p>Top padding (note: <code>2</code> is the same as <code>2px</code>)</p> <p> TYPE: <code>int | str | None</code> </p> <code>right</code> <p>Right padding</p> <p> TYPE: <code>int | str | None</code> </p> <code>bottom</code> <p>Bottom padding</p> <p> TYPE: <code>int | str | None</code> </p> <code>left</code> <p>Left padding</p> <p> TYPE: <code>int | str | None</code> </p>"},{"location":"api/style/#mesop.component_helpers.style.Padding.all","title":"<code>all</code>  <code>staticmethod</code>","text":"<p>Creates a Padding instance with the same value for all sides.</p> PARAMETER DESCRIPTION <code>value</code> <p>The value to apply to all sides of the padding. Can be an integer (pixel value) or a string.</p> <p> TYPE: <code>int | str</code> </p> RETURNS DESCRIPTION <code>Padding</code> <p>A new Padding instance with the specified value applied to all sides.</p> <p> TYPE: <code>Padding</code> </p>"},{"location":"api/style/#mesop.component_helpers.style.Padding.symmetric","title":"<code>symmetric</code>  <code>staticmethod</code>","text":"<p>Creates a Padding instance with symmetric values for vertical and horizontal sides.</p> PARAMETER DESCRIPTION <code>vertical</code> <p>The value to apply to the top and bottom sides of the padding. Can be an integer (pixel value) or a string.</p> <p> TYPE: <code>int | str | None</code> DEFAULT: <code>None</code> </p> <code>horizontal</code> <p>The value to apply to the right and left sides of the padding. Can be an integer (pixel value) or a string.</p> <p> TYPE: <code>int | str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Padding</code> <p>A new Padding instance with the specified values applied to the vertical and horizontal sides.</p> <p> TYPE: <code>Padding</code> </p>"},{"location":"api/viewport_size/","title":"Viewport size","text":""},{"location":"api/viewport_size/#overview","title":"Overview","text":"<p>The viewport size API allows you to access the current viewport size. This can be useful for creating responsive and adaptive designs that are suitable for the user's screen size.</p>"},{"location":"api/viewport_size/#examples","title":"Examples","text":""},{"location":"api/viewport_size/#responsive-design","title":"Responsive Design","text":"<p>Responsive design is having a single fluid layout that adapts to all screen sizes.</p> <p>You can use the viewport size to dynamically set the property of a style. This can be useful if you want to fit two boxes in a row for larger screens (e.g. desktop) and a single box for smaller screens (e.g. mobile) as shown in the example below:</p> <pre><code>import mesop as me\n\n@me.page()\ndef page():\n    if me.viewport_size().width &gt; 640:\n        width = me.viewport_size().width / 2\n    else:\n        width = me.viewport_size().width\n    for i in range(8):\n      me.box(style=me.Style(width=width))\n</code></pre> <p>Tip: Responsive design tends to take less work and is usually a good starting point.</p>"},{"location":"api/viewport_size/#adaptive-design","title":"Adaptive Design","text":"<p>Adaptive design is having multiple fixed layouts for specific device categories at specific breakpoints, typically viewport width.</p> <p>For example, oftentimes you will hide the nav component on a mobile device and instead show a hamburger menu, while for a larger device you will always show the nav component on the left side.</p> <pre><code>import mesop as me\n\n@me.page()\ndef page():\n    if me.viewport_size().width &gt; 480:\n        nav_component()\n        body()\n    else:\n        body(show_menu_button=True)\n</code></pre> <p>Tip: Adaptive design tends to take more work and is best for optimizing complex mobile and desktop experiences.</p>"},{"location":"api/viewport_size/#api","title":"API","text":""},{"location":"api/viewport_size/#mesop.features.viewport_size.viewport_size","title":"<code>viewport_size</code>","text":"<p>Returns the current viewport size.</p> RETURNS DESCRIPTION <code>Size</code> <p>The current viewport size.</p> <p> TYPE: <code>Size</code> </p>"},{"location":"api/viewport_size/#mesop.features.viewport_size.Size","title":"<code>Size</code>  <code>dataclass</code>","text":"ATTRIBUTE DESCRIPTION <code>width</code> <p>The width of the viewport in pixels.</p> <p> TYPE: <code>int</code> </p> <code>height</code> <p>The height of the viewport in pixels.</p> <p> TYPE: <code>int</code> </p>"},{"location":"api/commands/navigate/","title":"Navigate","text":"<p>To navigate to another page, you can use <code>me.navigate</code>. This is particularly useful for navigating across a multi-page app.</p>"},{"location":"api/commands/navigate/#example","title":"Example","text":"<pre><code>import time\n\nimport mesop as me\n\n\ndef on_load(e: me.LoadEvent):\n  state = me.state(State)\n  state.default_values.append(\"a\")\n  yield\n  time.sleep(1)\n  state.default_values.append(\"b\")\n  yield\n\n\n@me.page(path=\"/docs/on_load_generator\", on_load=on_load)\ndef app():\n  me.text(\"onload\")\n  me.text(str(me.state(State).default_values))\n\n\n@me.stateclass\nclass State:\n  default_values: list[str]\n</code></pre>"},{"location":"api/commands/navigate/#api","title":"API","text":""},{"location":"api/commands/navigate/#mesop.commands.navigate.navigate","title":"<code>navigate</code>","text":"<p>Navigates to the given URL.</p> PARAMETER DESCRIPTION <code>url</code> <p>The URL to navigate to.</p> <p> TYPE: <code>str</code> </p>"},{"location":"api/commands/scroll_into_view/","title":"Scroll into view","text":"<p>If you want to scroll a component into the viewport, you can use <code>me.scroll_into_view</code> which scrolls the component with the specified key into the viewport.</p>"},{"location":"api/commands/scroll_into_view/#example","title":"Example","text":"<pre><code>import time\n\nimport mesop as me\n\n\n@me.stateclass\nclass State:\n  more_lines: int = 0\n\n\n@me.page(path=\"/scroll_into_view\")\ndef app():\n  me.button(\"Scroll to middle line\", on_click=scroll_to_middle)\n  me.button(\"Scroll to bottom line\", on_click=scroll_to_bottom)\n  me.button(\n    \"Scroll to bottom line &amp; generate lines\",\n    on_click=scroll_to_bottom_and_generate_lines,\n  )\n  for _ in range(100):\n    me.text(\"Filler line\")\n  me.text(\"middle_line\", key=\"middle_line\")\n  for _ in range(100):\n    me.text(\"Filler line\")\n  me.text(\"bottom_line\", key=\"bottom_line\")\n  for _ in range(me.state(State).more_lines):\n    me.text(\"More lines\")\n\n\ndef scroll_to_middle(e: me.ClickEvent):\n  me.scroll_into_view(key=\"middle_line\")\n\n\ndef scroll_to_bottom(e: me.ClickEvent):\n  me.scroll_into_view(key=\"bottom_line\")\n\n\ndef scroll_to_bottom_and_generate_lines(e: me.ClickEvent):\n  state = me.state(State)\n  me.scroll_into_view(key=\"bottom_line\")\n  yield\n  state.more_lines += 5\n  time.sleep(1)\n  yield\n  state.more_lines += 5\n  time.sleep(1)\n  yield\n  state.more_lines += 5\n  time.sleep(1)\n  yield\n  state.more_lines += 5\n  time.sleep(1)\n  yield\n</code></pre>"},{"location":"api/commands/scroll_into_view/#api","title":"API","text":""},{"location":"api/commands/scroll_into_view/#mesop.commands.scroll_into_view.scroll_into_view","title":"<code>scroll_into_view</code>","text":"<p>Scrolls so the component specified by the key is in the viewport.</p> PARAMETER DESCRIPTION <code>key</code> <p>The unique identifier of the component to scroll to.          This key should be globally unique to prevent unexpected behavior.          If multiple components share the same key, the first component          instance found in the component tree will be scrolled to.</p> <p> TYPE: <code>str</code> </p>"},{"location":"blog/","title":"Blog Home","text":""},{"location":"blog/2023/12/25/hello-mesop/","title":"Hello, Mesop","text":"<p>After working on Mesop for the last two months, I'm excited to finally announce the first version of Mesop, v0.1. This is still early days for Mesop, but it's an important milestone because it represents a minimum viable tool for building UIs in Python. In case you haven't read Mesop's home page, Mesop is a Python-based UI framework that allows you to rapidly build web demos. Engineers without frontend experience can build web UIs by writing idiomatic Python code.</p>"},{"location":"blog/2023/12/25/hello-mesop/#why-mesop","title":"Why Mesop?","text":"<p>Mesop is in many ways a remix of many existing ideas packaged into a single cohesive UI framework, designed for Python developers. I've documented some of these goals previously, but I'll quickly recap the benefits of Mesop here:</p> <ul> <li>Allows non-frontend engineers to rapidly build UIs for internal use cases like demos.</li> <li>Provides a fast build-edit-refresh loop through hot reload.</li> <li>Enables developers to benefit from the mature Angular web framework and Angular Material components.</li> <li>Provides a flexible and composable components API that's idiomatic to Python.</li> <li>Easy to deploy by using standard HTTP technologies like Server-Sent Events.</li> </ul>"},{"location":"blog/2023/12/25/hello-mesop/#whats-next-for-mesop","title":"What's next for Mesop?","text":"<p>I see a few broad themes of work in the coming year or so.</p>"},{"location":"blog/2023/12/25/hello-mesop/#expand-mesops-component-library","title":"Expand Mesop's component library","text":"<p>Mesop's current component library is a solid start but there's still gaps to support common use cases.</p> <p>Areas of work:</p> <ul> <li> <p>Complete Angular Material component coverage. We support 13+ Angular Material components today, however there's many more that we don't support. Some of it is because I haven't had time to wrap their components, but in other cases (e.g. sidenav), I'd like to spend more time exploring the design space as it will probably require supporting some kind of multi-slot component API. Getting this API designed correctly, for not just this component but also future components, is important in the long run.</p> </li> <li> <p>Support more native HTML elements/browser APIs. Right now, only Box and Text are thin wrappers around native HTML elements. However, there are other HTML elements like <code>&lt;img&gt;</code>, <code>&lt;audio&gt;</code>  and <code>&lt;video&gt;</code> that I'd like to also support. The flip side of supporting these components is enabling a way to allow Mesop end-users to upload these media contents, which there are also native browser APIs for.</p> </li> <li> <p>Custom components. Some components won't belong in the standard Mesop package because it's either too experimental or too use-case specific. It would be nice to have a complete story for supporting custom components. Today, all of the components use the component helper API which wraps internal framework details like runtime. However, there still isn't a very good story for loading custom components in the Angular frontend (e.g. ComponentRenderer's type to component map) and testing them.</p> </li> </ul>"},{"location":"blog/2023/12/25/hello-mesop/#make-it-easy-to-get-started-with-mesop","title":"Make it easy to get started with Mesop","text":"<p>Using Mesop today requires following our internal development setup which requires dependencies like Bazel/iBazel which makes it easy to interoperate with our downstream sync, but these dependencies aren't commonly used in the Python ecosystem. Eventually, I'd like make using Mesop as simple as <code>pip install mesop</code> and then using Mesop's built-in CLI: <code>mesop serve</code> for local development and <code>mesop deploy</code> to deploy on a Cloud service.</p> <p>Areas of work:</p> <ul> <li> <p>Find a suitable ibazel replacement for Hot Reload. Instead of requiring Mesop developers to sync the entire repo and building the project with Bazel and iBazel, we should distribute a ready-to-use pip package of Mesop. However, this leaves an open question of how we support hot reload without iBazel which provides: 1) a filesystem watching mechanism and 2) live reload. We'll need to investigate good open-source equivalents for each of these capabilities.</p> </li> <li> <p>Provide web-based interactive demos. Many JavaScript UI frameworks provide a playground (e.g. Angular) or interactive tutorial (e.g. Solid) so that prospective developers can use the framework before going through the hassle of setting up their own local dev environment. This would also be very helpful to provide for each component as it's a lot easier to understand a component by tinkering with a live example.</p> </li> </ul>"},{"location":"blog/2023/12/25/hello-mesop/#explore-power-use-cases","title":"Explore power use cases","text":"<p>Today Mesop is good for internal apps with relatively un-stringent demands in terms of UI customizability and performance. For production-grade external apps, there's several areas that Mesop would need to advance in, before it's ready.</p> <p>Areas of work:</p> <ul> <li> <p>Optimize network payload. Right now the client sends the entire state to the server, and the server responds with the entire state and component tree. For large UIs/apps, this can result in sizable network payloads. We can optimize this by sending deltas as much as possible. For example, the server can send a delta of the state and component tree to the client. In addition, if we use POST instead of GET, we can stop using base-64 encoding which adds a significant overhead on top of Protobuf binary serialization.</p> </li> <li> <p>Stateful server. Even with the above optimizations, we'd essentially preserve the current architecture, but there's some limitations in how much improvements we can make as long as we assume servers are stateless. However, if we allow stateful servers (i.e. long-lived connections between the client and server), we can use things like WebSockets and always send deltas bi-directionally, in particular from client to server which isn't possible with a stateless server. The problem with this direction, though, is that it makes deployment more complex as scaling a WebSocket-based server can be hard depending on the cloud infrastructure used. In addition, we'll need to handle new edge cases like authentication and broken WebSockets connections.</p> </li> <li> <p>Optimistic UI. One of the drawbacks for server-driven UI frameworks like Mesop is that it introduces significant latency to simple user interactions. For example, if you click a button, it requires a network roundtrip before the UI is (meaningfully) updated. One way of dealing with this shortcoming is by pre-fetching the next UI state based on a user hint. For example, if a user is hovering over a button, we could optimistically calculate the state change and component tree change ahead of time before the actual click. The obvious downside to this is that optimistically executing an action is inappropriate in many cases, for example, a non-reversible action (e.g. delete) should never be optimistically done. To safely introduce this concept, we could provide an (optional) annotation for event handlers like <code>@me.optimistic(events=[me.HoverEvent])</code> so develpers could opt-in.</p> </li> </ul> <p>Some of these directions are potentially mutually exclusive. For example, having a stateful server may make optimistic UI practically more difficult because a stateful server means that non-serializable state could start to creep in to Mesop applications which makes undoing optimistic UI updates tricky</p> <p>There's, of course, even more directions than what I've listed here. For example, it's technically possible to compile Python into WebAssembly and run it in the browser and this could be another way of tackling latency to user interactions. However, this seems like a longer-term exploration, which is why I've left it out for now.</p>"},{"location":"blog/2023/12/25/hello-mesop/#interested-in-contributing","title":"Interested in contributing?","text":"<p>If any of this excites you, please reach out. The easiest way is to raise a GitHub issue and let me know if there's something specific you'd like to contribute.</p>"},{"location":"blog/2024/01/12/visual-editor/","title":"Visual Editor","text":""},{"location":"blog/2024/01/12/visual-editor/#why","title":"Why?","text":"<p>As I began discussing Mesop with friends and colleagues, one thing that has come up is the difficulty of teaching and persuading non-frontend engineers to build UIs, even simple ones. CSS, particularly the rules around layout, can be quite challenging and off-putting.</p> <p>I've developed a new visual editor for Mesop that aims to make UI building more approachable for beginners and more productive for experts.</p>"},{"location":"blog/2024/01/12/visual-editor/#what","title":"What?","text":"<p>Let's take a look at the visual editor:</p> <p></p> <p>With the visual editor, you can:</p> <ul> <li>Add new components into your app</li> <li>Modify existing components</li> <li>Visualize the component tree hierarchy</li> <li>You can inspect existing components on the page by hovering over them and then change them in the editor panel</li> <li>Bring Your Own components. By decorating a Python function with <code>me.component</code>, you've turned it into a Mesop component and you can now add it with the visual editor.</li> </ul> <p>What's exciting about the visual editor is that you aren't locked into it - everytime you change a component with the visual editor, it's modifying the source code directly so you can seamlessly go back forth between a regular text editor and the visual editor to build your Mesop app.</p>"},{"location":"blog/2024/01/12/visual-editor/#prior-art","title":"Prior Art","text":"<p>Visual editors (aka WYSIWYG builders) have been around for a long time. Puck is one of the most interesting ones because of a few reasons: 1) it's open-source, 2) it's flexible (e.g. bring your own components) and 3) it's intuitive and easy-to-use.</p> <p>The main issues I saw with Puck, particularly for Mesop's use case, is that it currently only supports React (and Mesop uses Angular) and Puck saves data whereas I would like Mesop's Visual Editor to directly emit/update code, which I'll explain next.</p>"},{"location":"blog/2024/01/12/visual-editor/#principles","title":"Principles","text":""},{"location":"blog/2024/01/12/visual-editor/#hybrid-code-not-low-code","title":"Hybrid code (not low-code)","text":"<p>One of the reasons why WYSIWYG builders have not gotten much traction with engineers is that they're often good for simple applications, but then you hit a wall building more complex applications.</p> <p>To avoid this issue, I'm focusing on making the Visual Editor actually emit code and not just data. Essentially, the UI code that you produce from the Visual Editor should be the same as the code that you would write by hand.</p>"},{"location":"blog/2024/01/12/visual-editor/#unobtrustive-ui","title":"Unobtrustive UI","text":"<p>I want Mesop app developers to do most of their work (except for the final finetuning for deployment) in the Visual Editior which means that it's important the Editor UI is un-obtrusive. Chrome DevTools is a great example of a low-key tool that many web developers keep open throughout their development - it's helpful for debugging, but then it's out of your way as you're interacting with the application.</p> <p>Concretely, this means:</p> <ul> <li>Editor UI should be collapsible</li> <li>You should be able to \"disable\" the editor mode and interact with the application as a normal user.</li> </ul>"},{"location":"blog/2024/01/12/visual-editor/#contextual","title":"Contextual","text":"<p>The visual editor should provide only the information that you need when you need it.</p> <p>For example, rather than showing all the style properties in the editor panel, which would be quite overwhelming, we only show the style properties that you're using for the selected component.</p>"},{"location":"blog/2024/01/12/visual-editor/#local-only","title":"Local-only","text":"<p>Because the Visual Editor relies on editing files in your local filesystem, I want to avoid any accidental usages out in the wild. Concretely, this means that you can only use the Visual Editor in localhost, otherwise the Mesop server will reject the editor edit requests.</p>"},{"location":"blog/2024/01/12/visual-editor/#whats-next","title":"What's next","text":"<p>There's still a lot of improvements and polishes I would like to make to the visual editor, but a few high-level ideas that I have are:</p> <ol> <li>Build example applications using the visual editor with a video walkthrough.</li> <li>Create more high-level components in Mesop Labs, which I'll introduce in an upcoming blog post, to make it even easier to build apps with the visual editor.</li> <li>Drag and drop components onto the page and within the page. This will provide an intuitive experience for building the UI, literally block by block.</li> </ol>"},{"location":"blog/2024/05/13/why-mesop/","title":"Why Mesop?","text":"<p>Mesop is a new UI framework that enables Python developers to quickly build delightful web apps in a scalable way.</p> <p>Many Python UI frameworks are easy to get started with, but customizing beyond the defaults often requires diving into JavaScript, CSS, and HTML \u2014 a steep learning curve for many developers.</p> <p>Mesop provides a different approach, offering a framework that's both easy to learn and enables flexible UI building, all within Python.</p> <p>I want to share a couple concrete ways in which Mesop achieves this.</p>"},{"location":"blog/2024/05/13/why-mesop/#build-uis-with-functions-ie-components","title":"Build UIs with Functions (i.e. Components)","text":"<p>Mesop embraces a component-based philosophy where the entire UI is composed of reusable, building blocks which are called components. Using a component is as simple as calling a Python function. This approach offers several benefits:</p> <ul> <li>Simplicity: You can use your existing Python knowledge to build UIs quickly and intuitively since components are just functions.</li> <li>Maintainability: Complex UIs become easier to manage and understand by breaking them down into smaller, focused components.</li> <li>Modularity: Components are self-contained, enabling easy reuse within a project or across different projects.</li> </ul> <p>Here's an example of a reusable icon button component:</p> <pre><code>def icon_button(*, icon: str, label: str, tooltip: str, on_click: Callable):\n  \"\"\"Icon button with text and tooltip.\"\"\"\n  with me.content_button(on_click=on_click):\n    with me.tooltip(message=tooltip):\n      with me.box(style=me.Style(display=\"flex\")):\n        me.icon(icon=icon)\n        me.text(\n          label, style=me.Style(line_height=\"24px\", margin=me.Margin(left=5))\n        )\n</code></pre>"},{"location":"blog/2024/05/13/why-mesop/#flexibility-through-layered-building-blocks","title":"Flexibility through Layered Building Blocks","text":"<p>Mesop provides a range of UI building blocks, from low-level native components to high-level components.</p> <ul> <li>Low-level components: like box, offer granular control over layout and styling. They empower you to create custom UI elements through flexible layouts like flexbox and grid.</li> <li>High-level components: like chat, are built from low-level components and provide ready-to-use elements for common use cases, enabling rapid development.</li> </ul> <p>This layered approach makes deep customization possible. This means that if you want to customize the chat component, you can fork the chat implementation because it's written entirely in Python using Mesop's public APIs.</p>"},{"location":"blog/2024/05/13/why-mesop/#see-mesop-in-action","title":"See Mesop in Action","text":"<p>To demonstrate the range of UIs possible with Mesop, we built a demo gallery to showcase the types of applications you can build and the components that are available:</p> <p>The demo gallery itself is a Mesop app and implemented in a few hundred lines of Python code. It demonstrates how Mesop can be used to create polished, custom UIs in a maintainable way.</p>"},{"location":"blog/2024/05/13/why-mesop/#try-mesop","title":"Try Mesop","text":"<p>If this sounds intriguing, read the Getting Started guide and try building your own Mesop app. Share your feedback and contribute as we continue developing Mesop.</p>"},{"location":"components/","title":"Components","text":"<p>Please read Quickstart before this as it explains the basics of components. This page provides an overview of the different types of components in Mesop.</p>"},{"location":"components/#types-of-components","title":"Types of components","text":""},{"location":"components/#native-components","title":"Native components","text":"<p>Native components are components implemented using Angular/Javascript. Many of these components wrap Angular Material components. Other components are simple wrappers around DOM elements.</p> <p>If you have a use case that's not supported by the existing native components, please file an issue on GitHub to explain your use case. Given our limited bandwidth, we may not be able to build it soon, but in the future, we will enable Mesop developers to build their own custom native components.</p>"},{"location":"components/#user-defined-components","title":"User-defined components","text":"<p>User-defined components are essentially Python functions which call other components, which can be native components or other user-defined components. It's very easy to write your own components, and it's encouraged to split your app into modular components for better maintainability and reusability.</p>"},{"location":"components/#web-components","title":"Web components","text":"<p>Web components in Mesop are custom HTML elements created using JavaScript and CSS. They enable custom JavaScript execution and bi-directional communication between the browser and server. They can wrap JavaScript libraries and provide stateful client-side interactions. Learn more about web components.</p>"},{"location":"components/#content-components","title":"Content components","text":"<p>Content components allow you to compose components more flexibly than regular components by accepting child(ren) components. A commonly used content component is the button component, which accepts a child component which oftentimes the text component.</p> <p>Example:</p> <pre><code>with me.button():\n  me.text(\"Child\")\n</code></pre> <p>You can also have multiple content components nested:</p> <pre><code>with me.box():\n  with me.box():\n    me.text(\"Grand-child\")\n</code></pre> <p>Sometimes, you may want to define your own content component for better reusability. For example, let's say I want to define a scaffold component which includes a menu positioned on the left and a main content area, I could do the following:</p> <pre><code>@me.content_component\ndef scaffold(url: str):\n  with me.box(style=\"background: white\"):\n    menu(url=url)\n    with me.box(style=f\"padding-left: {MENU_WIDTH}px\"):\n      me.slot()\n</code></pre> <p>Now other components can re-use this scaffold component:</p> <pre><code>def page1():\n  with scaffold(url=\"/page1\"):\n    some_content(...)\n</code></pre> <p>This is similar to Angular's Content Projection.</p>"},{"location":"components/#component-key","title":"Component Key","text":"<p>Every native component in Mesop accepts a <code>key</code> argument which is a component identifier. This is used by Mesop to tell Angular whether to reuse the DOM element.</p>"},{"location":"components/#resetting-a-component","title":"Resetting a component","text":"<p>You can reset a component to the initial state (e.g. reset a select component to the unselected state) by giving it a new key value across renders.</p> <p>For example, you can reset a component by \"incrementing\" the key:</p> <pre><code>class State:\n  select_menu_key: int\n\ndef reset(event):\n  state = me.state(State)\n  state.select_menu_key += 1\n\ndef main():\n  state = me.state(State)\n  me.select(key=str(state.select_menu_key),\n            options=[me.SelectOption(label=\"o1\", value=\"o1\")])\n  me.button(label=\"Reset\", on_click=reset)\n</code></pre>"},{"location":"components/#event-handlers","title":"Event handlers","text":"<p>Every Mesop event includes the key of the component which emitted the event. This makes it useful when you want to reuse an event handler for multiple instances of a component:</p> <pre><code>def buttons():\n  for fruit in [\"Apple\", \"Banana\"]:\n    me.button(fruit, key=fruit, on_click=on_click)\n\ndef on_click(event: me.ClickEvent):\n  fruit = me.key\n  print(\"fruit name\", fruit)\n</code></pre> <p>Because a key is a <code>str</code> type, you may sometimes want to store more complex data like a dataclass or a proto object for retrieval in the event handler. To do this, you can serialize and deserialize:</p> <pre><code>import json\nfrom dataclasses import dataclass\n\n@dataclass\nclass Person:\n  name: str\n\ndef buttons():\n  for person in [Person(name=\"Alice\"), Person(name=\"Bob\")]:\n    # serialize dataclass into str\n    key = json.dumps(person.asdict())\n    me.button(person.name, key=key, on_click=on_click)\n\ndef on_click(event: me.ClickEvent):\n  person_dict = json.loads(me.key)\n  # modify this for more complex deserialization\n  person = Person(**person_dict)\n</code></pre> <p>Use component key for reusable event handler</p> <p>This avoids a subtle issue with using closure variables in event handlers.</p>"},{"location":"components/audio/","title":"Audio","text":""},{"location":"components/audio/#overview","title":"Overview","text":"<p>Audio is the equivalent of an <code>&lt;audio&gt;</code> HTML element. Audio displays the browser's native audio controls.</p>"},{"location":"components/audio/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\n@me.page(\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://google.github.io\"]\n  ),\n  path=\"/audio\",\n)\ndef app():\n  \"\"\"\n  In order to autoplay audio, set the `autoplay` attribute to `True`,\n  Note that there are autoplay restrictions in modern browsers, including Chrome,\n  are designed to prevent audio or video from playing automatically without user interaction.\n  This is intended to improve user experience and reduce unwanted interruptions.\n  You can check the [autoplay ability of your application](https://developer.mozilla.org/en-US/docs/Web/Media/Autoplay_guide#autoplay_availability)\n  \"\"\"\n  me.audio(\n    src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-audio/t-rex-roar.mp3\",\n    # autoplay=True\n  )\n</code></pre>"},{"location":"components/audio/#api","title":"API","text":""},{"location":"components/audio/#mesop.components.audio.audio.audio","title":"<code>audio</code>","text":"<p>Creates an audio component.</p> PARAMETER DESCRIPTION <code>src</code> <p>The URL of the audio to be played.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>autoplay</code> <p>boolean value indicating if the audio should be autoplayed or not. Note: There are autoplay restrictions in modern browsers, including Chrome, are designed to prevent audio or video from playing automatically without user interaction. This is intended to improve user experience and reduce unwanted interruptions</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/badge/","title":"Badge","text":""},{"location":"components/badge/#overview","title":"Overview","text":"<p>Badge decorates a UI component and is oftentimes used for unread message count and is based on the Angular Material badge component.</p>"},{"location":"components/badge/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\n@me.page(\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://google.github.io\"]\n  ),\n  path=\"/badge\",\n)\ndef app():\n  with me.box(\n    style=me.Style(\n      display=\"block\",\n      padding=me.Padding(top=16, right=16, bottom=16, left=16),\n      height=50,\n      width=30,\n    )\n  ):\n    with me.badge(content=\"1\", size=\"medium\"):\n      me.text(text=\"text with badge\")\n</code></pre>"},{"location":"components/badge/#api","title":"API","text":""},{"location":"components/badge/#mesop.components.badge.badge.badge","title":"<code>badge</code>","text":"<p>Creates a Badge component. Badge is a composite component.</p> PARAMETER DESCRIPTION <code>color</code> <p>The color of the badge. Can be <code>primary</code>, <code>accent</code>, or <code>warn</code>.</p> <p> TYPE: <code>Literal['primary', 'accent', 'warn']</code> DEFAULT: <code>'primary'</code> </p> <code>overlap</code> <p>Whether the badge should overlap its contents or not</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>disabled</code> <p>Whether the badge is disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>position</code> <p>Position the badge should reside. Accepts any combination of 'above'|'below' and 'before'|'after'</p> <p> TYPE: <code>Literal['above after', 'above before', 'below before', 'below after', 'before', 'after', 'above', 'below']</code> DEFAULT: <code>'above after'</code> </p> <code>content</code> <p>The content for the badge</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>description</code> <p>Message used to describe the decorated element via aria-describedby</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>size</code> <p>Size of the badge. Can be 'small', 'medium', or 'large'.</p> <p> TYPE: <code>Literal['small', 'medium', 'large']</code> DEFAULT: <code>'small'</code> </p> <code>hidden</code> <p>Whether the badge is hidden.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/box/","title":"Box","text":""},{"location":"components/box/#overview","title":"Overview","text":"<p>Box is a content component which acts as a container to group children components and styling them.</p>"},{"location":"components/box/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\n@me.page(\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://google.github.io\"]\n  ),\n  path=\"/box\",\n)\ndef app():\n  with me.box(style=me.Style(background=\"red\", padding=me.Padding.all(16))):\n    with me.box(\n      style=me.Style(\n        background=\"green\",\n        height=50,\n        margin=me.Margin.symmetric(vertical=24, horizontal=12),\n        border=me.Border.symmetric(\n          horizontal=me.BorderSide(width=2, color=\"pink\", style=\"solid\"),\n          vertical=me.BorderSide(width=2, color=\"orange\", style=\"solid\"),\n        ),\n      )\n    ):\n      me.text(text=\"hi1\")\n      me.text(text=\"hi2\")\n</code></pre>"},{"location":"components/box/#api","title":"API","text":""},{"location":"components/box/#mesop.components.box.box.box","title":"<code>box</code>","text":"<p>Creates a box component.</p> PARAMETER DESCRIPTION <code>style</code> <p>Style to apply to component. Follows HTML Element inline style API.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>on_click</code> <p>The callback function that is called when the box is clicked. It receives a ClickEvent as its only argument.</p> <p> TYPE: <code>Callable[[ClickEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Any</code> <p>The created box component.</p>"},{"location":"components/button/","title":"Button","text":""},{"location":"components/button/#overview","title":"Overview","text":"<p>Button is based on the Angular Material button component.</p>"},{"location":"components/button/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\n@me.page(\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://google.github.io\"]\n  ),\n  path=\"/button\",\n)\ndef main():\n  me.text(\"Button types:\", style=me.Style(margin=me.Margin(bottom=12)))\n  with me.box(style=me.Style(display=\"flex\", flex_direction=\"row\", gap=12)):\n    me.button(\"default\")\n    me.button(\"raised\", type=\"raised\")\n    me.button(\"flat\", type=\"flat\")\n    me.button(\"stroked\", type=\"stroked\")\n\n  me.text(\"Button colors:\", style=me.Style(margin=me.Margin(bottom=12)))\n  with me.box(style=me.Style(display=\"flex\", flex_direction=\"row\", gap=12)):\n    me.button(\"default\", type=\"flat\")\n    me.button(\"primary\", color=\"primary\", type=\"flat\")\n    me.button(\"secondary\", color=\"accent\", type=\"flat\")\n    me.button(\"warn\", color=\"warn\", type=\"flat\")\n</code></pre>"},{"location":"components/button/#api","title":"API","text":""},{"location":"components/button/#mesop.components.button.button.button","title":"<code>button</code>","text":"<p>Creates a simple text Button component.</p> PARAMETER DESCRIPTION <code>label</code> <p>Text label for button</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>on_click</code> <p>click is a native browser event.</p> <p> TYPE: <code>Callable[[ClickEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>type</code> <p>Type of button style to use</p> <p> TYPE: <code>Literal['raised', 'flat', 'stroked'] | None</code> DEFAULT: <code>None</code> </p> <code>color</code> <p>Theme color palette of the button</p> <p> TYPE: <code>Literal['primary', 'accent', 'warn'] | None</code> DEFAULT: <code>None</code> </p> <code>disable_ripple</code> <p>Whether the ripple effect is disabled or not.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>disabled</code> <p>Whether the button is disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>style</code> <p>Style for the component.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/button/#mesop.components.button.button.content_button","title":"<code>content_button</code>","text":"<p>Creates a button component, which is a composite component. Typically, you would use a text or icon component as a child.</p> <p>Intended for advanced use cases.</p> PARAMETER DESCRIPTION <code>on_click</code> <p>click is a native browser event.</p> <p> TYPE: <code>Callable[[ClickEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>type</code> <p>Type of button style to use</p> <p> TYPE: <code>Literal['raised', 'flat', 'stroked', 'icon'] | None</code> DEFAULT: <code>None</code> </p> <code>color</code> <p>Theme color palette of the button</p> <p> TYPE: <code>Literal['primary', 'accent', 'warn'] | None</code> DEFAULT: <code>None</code> </p> <code>disable_ripple</code> <p>Whether the ripple effect is disabled or not.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>disabled</code> <p>Whether the button is disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>style</code> <p>Style for the component.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/button/#mesop.events.ClickEvent","title":"<code>ClickEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>MesopEvent</code></p> <p>Represents a user click event.</p> ATTRIBUTE DESCRIPTION <code>key</code> <p>key of the component that emitted this event.</p> <p> TYPE: <code>str</code> </p>"},{"location":"components/chat/","title":"Chat","text":""},{"location":"components/chat/#overview","title":"Overview","text":"<p>Chat component is a quick way to create a simple chat interface. Chat is part of Mesop Labs.</p>"},{"location":"components/chat/#examples","title":"Examples","text":"<pre><code>import random\nimport time\n\nimport mesop as me\nimport mesop.labs as mel\n\n\n@me.page(\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://google.github.io\"]\n  ),\n  path=\"/chat\",\n  title=\"Mesop Demo Chat\",\n)\ndef page():\n  mel.chat(transform, title=\"Mesop Demo Chat\", bot_user=\"Mesop Bot\")\n\n\ndef transform(input: str, history: list[mel.ChatMessage]):\n  for line in random.sample(LINES, random.randint(3, len(LINES) - 1)):\n    time.sleep(0.3)\n    yield line + \" \"\n\n\nLINES = [\n  \"Mesop is a Python-based UI framework designed to simplify web UI development for engineers without frontend experience.\",\n  \"It leverages the power of the Angular web framework and Angular Material components, allowing rapid construction of web demos and internal tools.\",\n  \"With Mesop, developers can enjoy a fast build-edit-refresh loop thanks to its hot reload feature, making UI tweaks and component integration seamless.\",\n  \"Deployment is straightforward, utilizing standard HTTP technologies.\",\n  \"Mesop's component library aims for comprehensive Angular Material component coverage, enhancing UI flexibility and composability.\",\n  \"It supports custom components for specific use cases, ensuring developers can extend its capabilities to fit their unique requirements.\",\n  \"Mesop's roadmap includes expanding its component library and simplifying the onboarding processs.\",\n]\n</code></pre>"},{"location":"components/chat/#api","title":"API","text":""},{"location":"components/chat/#mesop.labs.chat.chat","title":"<code>chat</code>","text":"<p>Creates a simple chat UI which takes in a prompt and chat history and returns a response to the prompt.</p> <p>This function creates event handlers for text input and output operations using the provided function <code>transform</code> to process the input and generate the output.</p> PARAMETER DESCRIPTION <code>transform</code> <p>Function that takes in a prompt and chat history and returns a response to the prompt.</p> <p> TYPE: <code>Callable[[str, list[ChatMessage]], Generator[str, None, None] | str]</code> </p> <code>title</code> <p>Headline text to display at the top of the UI.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>bot_user</code> <p>Name of your bot / assistant.</p> <p> TYPE: <code>str</code> DEFAULT: <code>_BOT_USER_DEFAULT</code> </p>"},{"location":"components/checkbox/","title":"Checkbox","text":""},{"location":"components/checkbox/#overview","title":"Overview","text":"<p>Checkbox is a multi-selection form control and is based on the Angular Material checkbox component.</p>"},{"location":"components/checkbox/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\n@me.stateclass\nclass State:\n  checked: bool\n\n\ndef on_update(event: me.CheckboxChangeEvent):\n  state = me.state(State)\n  state.checked = event.checked\n\n\n@me.page(\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://google.github.io\"]\n  ),\n  path=\"/checkbox\",\n)\ndef app():\n  state = me.state(State)\n  me.checkbox(\n    \"Simple checkbox\",\n    on_change=on_update,\n  )\n\n  if state.checked:\n    me.text(text=\"is checked\")\n  else:\n    me.text(text=\"is not checked\")\n</code></pre>"},{"location":"components/checkbox/#api","title":"API","text":""},{"location":"components/checkbox/#mesop.components.checkbox.checkbox.checkbox","title":"<code>checkbox</code>","text":"<p>Creates a simple Checkbox component with a text label.</p> PARAMETER DESCRIPTION <code>label</code> <p>Text label for checkbox</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>on_change</code> <p>Event emitted when the checkbox's <code>checked</code> value changes.</p> <p> TYPE: <code>Callable[[CheckboxChangeEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>on_indeterminate_change</code> <p>Event emitted when the checkbox's <code>indeterminate</code> value changes.</p> <p> TYPE: <code>Callable[[CheckboxIndeterminateChangeEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>label_position</code> <p>Whether the label should appear after or before the checkbox. Defaults to 'after'</p> <p> TYPE: <code>Literal['before', 'after']</code> DEFAULT: <code>'after'</code> </p> <code>disable_ripple</code> <p>Whether the checkbox has a ripple.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>tab_index</code> <p>Tabindex for the checkbox.</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>color</code> <p>Palette color of the checkbox.</p> <p> TYPE: <code>Literal['primary', 'accent', 'warn'] | None</code> DEFAULT: <code>None</code> </p> <code>checked</code> <p>Whether the checkbox is checked.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>disabled</code> <p>Whether the checkbox is disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>indeterminate</code> <p>Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to represent a checkbox with three states, e.g. a checkbox that represents a nested list of checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately set to false.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>style</code> <p>Style for the component.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/checkbox/#mesop.components.checkbox.checkbox.content_checkbox","title":"<code>content_checkbox</code>","text":"<p>Creates a Checkbox component which is a composite component. Typically, you would use a text or icon component as a child.</p> <p>Intended for advanced use cases.</p> PARAMETER DESCRIPTION <code>on_change</code> <p>Event emitted when the checkbox's <code>checked</code> value changes.</p> <p> TYPE: <code>Callable[[CheckboxChangeEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>on_indeterminate_change</code> <p>Event emitted when the checkbox's <code>indeterminate</code> value changes.</p> <p> TYPE: <code>Callable[[CheckboxIndeterminateChangeEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>label_position</code> <p>Whether the label should appear after or before the checkbox. Defaults to 'after'</p> <p> TYPE: <code>Literal['before', 'after']</code> DEFAULT: <code>'after'</code> </p> <code>disable_ripple</code> <p>Whether the checkbox has a ripple.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>tab_index</code> <p>Tabindex for the checkbox.</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>color</code> <p>Palette color of the checkbox.</p> <p> TYPE: <code>Literal['primary', 'accent', 'warn'] | None</code> DEFAULT: <code>None</code> </p> <code>checked</code> <p>Whether the checkbox is checked.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>disabled</code> <p>Whether the checkbox is disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>indeterminate</code> <p>Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to represent a checkbox with three states, e.g. a checkbox that represents a nested list of checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately set to false.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>style</code> <p>Style for the component.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/checkbox/#mesop.components.checkbox.checkbox.CheckboxChangeEvent","title":"<code>CheckboxChangeEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>MesopEvent</code></p> <p>Represents a checkbox state change event.</p> ATTRIBUTE DESCRIPTION <code>checked</code> <p>The new checked state of the checkbox.</p> <p> TYPE: <code>bool</code> </p> <code>key</code> <p>key of the component that emitted this event.</p> <p> TYPE: <code>str</code> </p>"},{"location":"components/checkbox/#mesop.components.checkbox.checkbox.CheckboxIndeterminateChangeEvent","title":"<code>CheckboxIndeterminateChangeEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>MesopEvent</code></p> <p>Represents a checkbox indeterminate state change event.</p> ATTRIBUTE DESCRIPTION <code>checked</code> <p>The new indeterminate state of the checkbox.</p> <p> </p> <code>key</code> <p>key of the component that emitted this event.</p> <p> TYPE: <code>str</code> </p>"},{"location":"components/code/","title":"Code","text":""},{"location":"components/code/#overview","title":"Overview","text":"<p>Code is used to render code with syntax highlighting. <code>code</code> is a simple wrapper around markdown.</p>"},{"location":"components/code/#examples","title":"Examples","text":""},{"location":"components/code/#api","title":"API","text":""},{"location":"components/code/#mesop.components.code.code.code","title":"<code>code</code>","text":"<p>Creates a code component which displays code with syntax highlighting.</p>"},{"location":"components/divider/","title":"Divider","text":""},{"location":"components/divider/#overview","title":"Overview","text":"<p>Divider is used to provide visual separation and is based on the Angular Material divider component.</p>"},{"location":"components/divider/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\n@me.page(\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://google.github.io\"]\n  ),\n  path=\"/divider\",\n)\ndef app():\n  me.text(text=\"before\")\n  me.divider()\n  me.text(text=\"after\")\n</code></pre>"},{"location":"components/divider/#api","title":"API","text":""},{"location":"components/divider/#mesop.components.divider.divider.divider","title":"<code>divider</code>","text":"<p>Creates a Divider component.</p> PARAMETER DESCRIPTION <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>inset</code> <p>Whether the divider is an inset divider.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"components/embed/","title":"Embed","text":""},{"location":"components/embed/#overview","title":"Overview","text":"<p>Embed allows you to embed/iframe another web site in your Mesop app.</p>"},{"location":"components/embed/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\n@me.page(\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://google.github.io\"]\n  ),\n  path=\"/embed\",\n)\ndef app():\n  src = \"https://google.github.io/mesop/\"\n  me.text(\"Embedding: \" + src)\n  me.embed(\n    src=src,\n    style=me.Style(width=\"100%\", height=\"100%\"),\n  )\n</code></pre>"},{"location":"components/embed/#api","title":"API","text":""},{"location":"components/embed/#mesop.components.embed.embed.embed","title":"<code>embed</code>","text":"<p>This function creates an embed component.</p> PARAMETER DESCRIPTION <code>src</code> <p>The source URL for the embed content.</p> <p> TYPE: <code>str</code> </p> <code>style</code> <p>The style to apply to the embed, such as width and height.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/html/","title":"HTML","text":""},{"location":"components/html/#overview","title":"Overview","text":"<p>The HTML component allows you to add custom HTML to your Mesop app.</p> <p>Note: the HTML is sanitized by Angular for web security reasons so potentially unsafe code like JavaScript is removed.</p>"},{"location":"components/html/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\n@me.page(path=\"/html_demo\")\ndef app():\n  me.html(\n    \"\"\"\nCustom HTML\n&lt;a href=\"https://google.github.io/mesop/\" target=\"_blank\"&gt;mesop&lt;/a&gt;\n\"\"\"\n  )\n</code></pre>"},{"location":"components/html/#api","title":"API","text":""},{"location":"components/html/#mesop.components.html.html.html","title":"<code>html</code>","text":"<p>This function renders custom HTML inside an iframe for web security isolation.</p> PARAMETER DESCRIPTION <code>html</code> <p>The HTML content to be rendered.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>style</code> <p>The style to apply to the embed, such as width and height.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/icon/","title":"Icon","text":""},{"location":"components/icon/#overview","title":"Overview","text":"<p>Icon displays a Material icon/symbol and is based on the Angular Material icon component.</p>"},{"location":"components/icon/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\n@me.page(\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://google.github.io\"]\n  ),\n  path=\"/icon\",\n)\ndef app():\n  me.text(\"home icon\")\n  me.icon(icon=\"home\")\n</code></pre>"},{"location":"components/icon/#api","title":"API","text":""},{"location":"components/icon/#mesop.components.icon.icon.icon","title":"<code>icon</code>","text":"<p>Creates a Icon component.</p> PARAMETER DESCRIPTION <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>icon</code> <p>Name of the Material Symbols icon.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>style</code> <p>Inline styles</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/image/","title":"Image","text":""},{"location":"components/image/#overview","title":"Overview","text":"<p>Image is the equivalent of an <code>&lt;img&gt;</code> HTML element.</p>"},{"location":"components/image/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\n@me.page(\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://google.github.io\"]\n  ),\n  path=\"/image\",\n)\ndef app():\n  me.image(\n    src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-images/grapefruit-slice-332-332.jpg\",\n    alt=\"Grapefruit\",\n    style=me.Style(width=\"100%\"),\n  )\n</code></pre>"},{"location":"components/image/#api","title":"API","text":""},{"location":"components/image/#mesop.components.image.image.image","title":"<code>image</code>","text":"<p>This function creates an image component.</p> PARAMETER DESCRIPTION <code>src</code> <p>The source URL of the image.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>alt</code> <p>The alternative text for the image if it cannot be displayed.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>style</code> <p>The style to apply to the image, such as width and height.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/input/","title":"Input","text":""},{"location":"components/input/#overview","title":"Overview","text":"<p>Input allows the user to type in a value and is based on the Angular Material input component.</p> <p>For longer text inputs, also see Textarea</p>"},{"location":"components/input/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\n@me.stateclass\nclass State:\n  input: str = \"\"\n\n\ndef on_input(e: me.InputEvent):\n  state = me.state(State)\n  state.input = e.value\n\n\n@me.page(\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://google.github.io\"]\n  ),\n  path=\"/input\",\n)\ndef app():\n  s = me.state(State)\n  me.input(label=\"Basic input\", on_input=on_input)\n  me.text(text=s.input)\n</code></pre>"},{"location":"components/input/#api","title":"API","text":""},{"location":"components/input/#mesop.components.input.input.input","title":"<code>input</code>","text":"<p>Creates a Input component.</p> PARAMETER DESCRIPTION <code>label</code> <p>Label for input.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>on_input</code> <p>input is a native browser event.</p> <p> TYPE: <code>Callable[[InputEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>on_enter</code> <p>triggers when the browser detects an \"Enter\" key on a keyup native browser event.</p> <p> TYPE: <code>Callable[[EnterEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>type</code> <p>Input type of the element. For textarea, use <code>me.Textarea(...)</code></p> <p> TYPE: <code>Literal['color', 'date', 'datetime-local', 'email', 'month', 'number', 'password', 'search', 'tel', 'text', 'time', 'url', 'week'] | None</code> DEFAULT: <code>None</code> </p> <code>appearance</code> <p>The form field appearance style.</p> <p> TYPE: <code>Literal['fill', 'outline']</code> DEFAULT: <code>'fill'</code> </p> <code>style</code> <p>Style for input.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether it's disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>placeholder</code> <p>Placeholder value</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>required</code> <p>Whether it's required</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>value</code> <p>Initial value.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>readonly</code> <p>Whether the element is readonly.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>hide_required_marker</code> <p>Whether the required marker should be hidden.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>color</code> <p>The color palette for the form field.</p> <p> TYPE: <code>Literal['primary', 'accent', 'warn']</code> DEFAULT: <code>'primary'</code> </p> <code>float_label</code> <p>Whether the label should always float or float as the user types.</p> <p> TYPE: <code>Literal['always', 'auto']</code> DEFAULT: <code>'auto'</code> </p> <code>subscript_sizing</code> <p>Whether the form field should reserve space for one line of hint/error text (default) or to have the spacing grow from 0px as needed based on the size of the hint/error content. Note that when using dynamic sizing, layout shifts will occur when hint/error text changes.</p> <p> TYPE: <code>Literal['fixed', 'dynamic']</code> DEFAULT: <code>'fixed'</code> </p> <code>hint_label</code> <p>Text for the form field hint.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/input/#mesop.components.input.input.native_textarea","title":"<code>native_textarea</code>","text":"<p>Creates a browser native Textarea component. Intended for advanced use cases with maximum UI control.</p> PARAMETER DESCRIPTION <code>on_input</code> <p>input is a native browser event.</p> <p> TYPE: <code>Callable[[InputEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>autosize</code> <p>If True, the textarea will automatically adjust its height to fit the content, up to the max_rows limit.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>min_rows</code> <p>The minimum number of rows the textarea will display.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>max_rows</code> <p>The maximum number of rows the textarea will display.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>style</code> <p>Style for input.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether it's disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>placeholder</code> <p>Placeholder value</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>value</code> <p>Initial value.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>readonly</code> <p>Whether the element is readonly.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/markdown/","title":"Markdown","text":""},{"location":"components/markdown/#overview","title":"Overview","text":"<p>Markdown is used to render markdown text.</p>"},{"location":"components/markdown/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\nSAMPLE_MARKDOWN = \"\"\"\n# Sample Markdown Document\n\n## Table of Contents\n1. [Headers](#headers)\n2. [Emphasis](#emphasis)\n3. [Lists](#lists)\n4. [Links](#links)\n5. [Code](#code)\n6. [Blockquotes](#blockquotes)\n7. [Tables](#tables)\n8. [Horizontal Rules](#horizontal-rules)\n\n## Headers\n# Header 1\n## Header 2\n### Header 3\n#### Header 4\n##### Header 5\n###### Header 6\n\n## Emphasis\n*Italic text* or _Italic text_\n**Bold text** or __Bold text__\n***Bold and Italic*** or ___Bold and Italic___\n\n## Lists\n\n### Unordered List\n- Item 1\n- Item 2\n  - Subitem 2.1\n  - Subitem 2.2\n\n### Ordered List\n1. First item\n2. Second item\n   1. Subitem 2.1\n   2. Subitem 2.2\n\n## Links\n[Google](https://www.google.com/)\n\n## Code\nInline `code`\n\"\"\"\n\n\n@me.page(\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://google.github.io\"]\n  ),\n  path=\"/markdown_demo\",\n)\ndef app():\n  me.markdown(SAMPLE_MARKDOWN)\n</code></pre>"},{"location":"components/markdown/#api","title":"API","text":""},{"location":"components/markdown/#mesop.components.markdown.markdown.markdown","title":"<code>markdown</code>","text":"<p>This function creates a markdown.</p> PARAMETER DESCRIPTION <code>text</code> <p>Required. Markdown text</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>style</code> <p>Style to apply to component. Follows HTML Element inline style API.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/plot/","title":"Plot","text":""},{"location":"components/plot/#overview","title":"Overview","text":"<p>Plot provides a convenient way to render Matplotlib figures as an image.</p>"},{"location":"components/plot/#examples","title":"Examples","text":"<pre><code>from matplotlib.figure import Figure\n\nimport mesop as me\n\n\n@me.page(\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://google.github.io\"]\n  ),\n  path=\"/plot\",\n)\ndef app():\n  # Create matplotlib figure without using pyplot:\n  fig = Figure()\n  ax = fig.subplots()  # type: ignore\n  ax.plot([1, 2])  # type: ignore\n\n  me.text(\"Example using matplotlib:\")\n  me.plot(fig, style=me.Style(width=\"100%\"))\n</code></pre>"},{"location":"components/plot/#api","title":"API","text":""},{"location":"components/plot/#mesop.components.plot.plot.plot","title":"<code>plot</code>","text":"<p>Creates a plot component from a Matplotlib figure.</p> PARAMETER DESCRIPTION <code>figure</code> <p>A Matplotlib figure which will be rendered.</p> <p> TYPE: <code>Figure</code> </p> <code>style</code> <p>An optional Style object that defines the visual styling for the plot component. If None, default styling (e.g. height, width) is used.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/progress_bar/","title":"Progress bar","text":""},{"location":"components/progress_bar/#overview","title":"Overview","text":"<p>Progress Bar is used to indicate something is in progress and is based on the Angular Material progress bar component.</p>"},{"location":"components/progress_bar/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\n@me.page(\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://google.github.io\"]\n  ),\n  path=\"/progress_bar\",\n)\ndef app():\n  me.text(\"Default progress bar\")\n  me.progress_bar()\n</code></pre>"},{"location":"components/progress_bar/#api","title":"API","text":""},{"location":"components/progress_bar/#mesop.components.progress_bar.progress_bar.progress_bar","title":"<code>progress_bar</code>","text":"<p>Creates a Progress bar component.</p> PARAMETER DESCRIPTION <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>color</code> <p>Theme palette color of the progress bar.</p> <p> TYPE: <code>Literal['primary', 'accent', 'warn'] | None</code> DEFAULT: <code>None</code> </p> <code>value</code> <p>Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow.</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>buffer_value</code> <p>Buffer value of the progress bar. Defaults to zero.</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>mode</code> <p>Mode of the progress bar. Input must be one of these values: determinate, indeterminate, buffer, query, defaults to 'determinate'. Mirrored to mode attribute.</p> <p> TYPE: <code>Literal['determinate', 'indeterminate', 'buffer', 'query']</code> DEFAULT: <code>'indeterminate'</code> </p> <code>on_animation_end</code> <p>Event emitted when animation of the primary progress bar completes. This event will not be emitted when animations are disabled, nor will it be emitted for modes with continuous animations (indeterminate and query).</p> <p> TYPE: <code>Callable[[ProgressBarAnimationEndEvent], Any] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/progress_bar/#mesop.components.progress_bar.progress_bar.ProgressBarAnimationEndEvent","title":"<code>ProgressBarAnimationEndEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>MesopEvent</code></p> <p>Event emitted when the animation of the progress bar ends.</p> ATTRIBUTE DESCRIPTION <code>value</code> <p>The value of the progress bar when the animation ends.</p> <p> TYPE: <code>float</code> </p> <code>key</code> <p>Key of the component that emitted this event.</p> <p> TYPE: <code>str</code> </p>"},{"location":"components/progress_spinner/","title":"Progress spinner","text":""},{"location":"components/progress_spinner/#overview","title":"Overview","text":"<p>Progress Spinner is used to indicate something is in progress and is based on the Angular Material progress spinner component.</p>"},{"location":"components/progress_spinner/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\n@me.page(\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://google.github.io\"]\n  ),\n  path=\"/progress_spinner\",\n)\ndef app():\n  me.progress_spinner()\n</code></pre>"},{"location":"components/progress_spinner/#api","title":"API","text":""},{"location":"components/progress_spinner/#mesop.components.progress_spinner.progress_spinner.progress_spinner","title":"<code>progress_spinner</code>","text":"<p>Creates a Progress spinner component.</p> PARAMETER DESCRIPTION <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>color</code> <p>Theme palette color of the progress spinner.</p> <p> TYPE: <code>Literal['primary', 'accent', 'warn'] | None</code> DEFAULT: <code>None</code> </p> <code>diameter</code> <p>The diameter of the progress spinner (will set width and height of svg).</p> <p> TYPE: <code>float</code> DEFAULT: <code>48</code> </p> <code>stroke_width</code> <p>Stroke width of the progress spinner.</p> <p> TYPE: <code>float</code> DEFAULT: <code>4</code> </p>"},{"location":"components/radio/","title":"Radio","text":""},{"location":"components/radio/#overview","title":"Overview","text":"<p>Radio is a single selection form control based on the Angular Material radio component.</p>"},{"location":"components/radio/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\n@me.stateclass\nclass State:\n  radio_value: str = \"2\"\n\n\ndef on_change(event: me.RadioChangeEvent):\n  s = me.state(State)\n  s.radio_value = event.value\n\n\n@me.page(\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://google.github.io\"]\n  ),\n  path=\"/radio\",\n)\ndef app():\n  s = me.state(State)\n  me.text(\"Horizontal radio options\")\n  me.radio(\n    on_change=on_change,\n    options=[\n      me.RadioOption(label=\"Option 1\", value=\"1\"),\n      me.RadioOption(label=\"Option 2\", value=\"2\"),\n    ],\n    value=s.radio_value,\n  )\n  me.text(text=\"Selected radio value: \" + s.radio_value)\n</code></pre>"},{"location":"components/radio/#api","title":"API","text":""},{"location":"components/radio/#mesop.components.radio.radio.radio","title":"<code>radio</code>","text":"<p>Creates a Radio component.</p> PARAMETER DESCRIPTION <code>options</code> <p>List of radio options</p> <p> TYPE: <code>Iterable[RadioOption]</code> DEFAULT: <code>()</code> </p> <code>on_change</code> <p>Event emitted when the group value changes. Change events are only emitted when the value changes due to user interaction with a radio button (the same behavior as <code>&lt;input type-\"radio\"&gt;</code>).</p> <p> TYPE: <code>Callable[[RadioChangeEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>color</code> <p>Theme color for all of the radio buttons in the group.</p> <p> TYPE: <code>Literal['primary', 'accent', 'warn'] | None</code> DEFAULT: <code>None</code> </p> <code>label_position</code> <p>Whether the labels should appear after or before the radio-buttons. Defaults to 'after'</p> <p> TYPE: <code>Literal['before', 'after']</code> DEFAULT: <code>'after'</code> </p> <code>value</code> <p>Value for the radio-group. Should equal the value of the selected radio button if there is a corresponding radio button with a matching value.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>disabled</code> <p>Whether the radio group is disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>style</code> <p>Style for the component.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/radio/#mesop.components.radio.radio.RadioOption","title":"<code>RadioOption</code>  <code>dataclass</code>","text":"ATTRIBUTE DESCRIPTION <code>label</code> <p>Content to show for the radio option</p> <p> TYPE: <code>str | None</code> </p> <code>value</code> <p>The value of this radio button.</p> <p> TYPE: <code>str | None</code> </p>"},{"location":"components/radio/#mesop.components.radio.radio.RadioChangeEvent","title":"<code>RadioChangeEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>MesopEvent</code></p> <p>Event representing a change in the radio component's value.</p> ATTRIBUTE DESCRIPTION <code>value</code> <p>The new value of the radio component after the change.</p> <p> TYPE: <code>str</code> </p> <code>key</code> <p>key of the component that emitted this event.</p> <p> TYPE: <code>str</code> </p>"},{"location":"components/select/","title":"Select","text":""},{"location":"components/select/#overview","title":"Overview","text":"<p>Select allows the user to choose from a list of values and is based on the Angular Material select component.</p>"},{"location":"components/select/#examples","title":"Examples","text":""},{"location":"components/select/#api","title":"API","text":""},{"location":"components/select/#mesop.components.select.select.select","title":"<code>select</code>","text":"<p>Creates a Select component.</p> PARAMETER DESCRIPTION <code>options</code> <p>List of select options.</p> <p> TYPE: <code>Iterable[SelectOption]</code> DEFAULT: <code>()</code> </p> <code>on_selection_change</code> <p>Event emitted when the selected value has been changed by the user.</p> <p> TYPE: <code>Callable[[SelectSelectionChangeEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>on_opened_change</code> <p>Event emitted when the select panel has been toggled.</p> <p> TYPE: <code>Callable[[SelectOpenedChangeEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether the select is disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>disable_ripple</code> <p>Whether ripples in the select are disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>multiple</code> <p>Whether multiple selections are allowed.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>tab_index</code> <p>Tab index of the select.</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>placeholder</code> <p>Placeholder to be shown if no value has been selected.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>value</code> <p>Value of the select control.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>style</code> <p>Style.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/select/#mesop.components.select.select.SelectOption","title":"<code>SelectOption</code>  <code>dataclass</code>","text":"<p>Represents an option within a select component.</p> ATTRIBUTE DESCRIPTION <code>label</code> <p>The content shown for the select option.</p> <p> TYPE: <code>str | None</code> </p> <code>value</code> <p>The value associated with the select option.</p> <p> TYPE: <code>str | None</code> </p>"},{"location":"components/select/#mesop.components.select.select.SelectSelectionChangeEvent","title":"<code>SelectSelectionChangeEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>MesopEvent</code></p> <p>Event representing a change in the select component's value(s).</p> ATTRIBUTE DESCRIPTION <code>values</code> <p>New values of the select component after the change.</p> <p> TYPE: <code>list[str]</code> </p> <code>key</code> <p>Key of the component that emitted this event.</p> <p> TYPE: <code>str</code> </p>"},{"location":"components/select/#mesop.components.select.select.SelectSelectionChangeEvent.value","title":"<code>value</code>  <code>property</code>","text":"<p>Shortcut for returning a single value.</p>"},{"location":"components/select/#mesop.components.select.select.SelectOpenedChangeEvent","title":"<code>SelectOpenedChangeEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>MesopEvent</code></p> <p>Event representing the opened state change of the select component.</p> ATTRIBUTE DESCRIPTION <code>opened</code> <p>A boolean indicating whether the select component is opened (True) or closed (False).</p> <p> TYPE: <code>bool</code> </p> <code>key</code> <p>key of the component that emitted this event.</p> <p> TYPE: <code>str</code> </p>"},{"location":"components/sidenav/","title":"Sidenav","text":""},{"location":"components/sidenav/#overview","title":"Overview","text":"<p>Sidenav is a sidebar typically used for navigation and is based on the Angular Material sidenav component.</p>"},{"location":"components/sidenav/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\n@me.stateclass\nclass State:\n  sidenav_open: bool\n\n\ndef on_click(e: me.ClickEvent):\n  s = me.state(State)\n  s.sidenav_open = not s.sidenav_open\n\n\nSIDENAV_WIDTH = 200\n\n\n@me.page(\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://google.github.io\"]\n  ),\n  path=\"/sidenav\",\n)\ndef app():\n  state = me.state(State)\n  with me.sidenav(\n    opened=state.sidenav_open, style=me.Style(width=SIDENAV_WIDTH)\n  ):\n    me.text(\"Inside sidenav\")\n\n  with me.box(\n    style=me.Style(\n      margin=me.Margin(left=SIDENAV_WIDTH if state.sidenav_open else 0),\n    ),\n  ):\n    with me.content_button(on_click=on_click):\n      me.icon(\"menu\")\n    me.markdown(\"Main content\")\n</code></pre>"},{"location":"components/sidenav/#api","title":"API","text":""},{"location":"components/sidenav/#mesop.components.sidenav.sidenav.sidenav","title":"<code>sidenav</code>","text":"<p>This function creates a sidenav.</p> PARAMETER DESCRIPTION <code>opened</code> <p>A flag to determine if the sidenav is open or closed. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>style</code> <p>An optional Style object to apply custom styles. Defaults to None.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/slide_toggle/","title":"Slide toggle","text":""},{"location":"components/slide_toggle/#overview","title":"Overview","text":"<p>Slide Toggle allows the user to toggle on and off and is based on the Angular Material slide toggle component.</p>"},{"location":"components/slide_toggle/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\n@me.stateclass\nclass State:\n  toggled: bool = False\n\n\ndef on_change(event: me.SlideToggleChangeEvent):\n  s = me.state(State)\n  s.toggled = not s.toggled\n\n\n@me.page(\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://google.github.io\"]\n  ),\n  path=\"/slide_toggle\",\n)\ndef app():\n  me.slide_toggle(label=\"Slide toggle\", on_change=on_change)\n  s = me.state(State)\n  me.text(text=f\"Toggled: {s.toggled}\")\n</code></pre>"},{"location":"components/slide_toggle/#api","title":"API","text":""},{"location":"components/slide_toggle/#mesop.components.slide_toggle.slide_toggle.slide_toggle","title":"<code>slide_toggle</code>","text":"<p>Creates a simple Slide toggle component with a text label.</p> PARAMETER DESCRIPTION <code>label</code> <p>Text label for slide toggle</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>on_change</code> <p>An event will be dispatched each time the slide-toggle changes its value.</p> <p> TYPE: <code>Callable[[SlideToggleChangeEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>label_position</code> <p>Whether the label should appear after or before the slide-toggle. Defaults to 'after'.</p> <p> TYPE: <code>Literal['before', 'after']</code> DEFAULT: <code>'after'</code> </p> <code>required</code> <p>Whether the slide-toggle is required.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>color</code> <p>Palette color of slide toggle.</p> <p> TYPE: <code>Literal['primary', 'accent', 'warn'] | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether the slide toggle is disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>disable_ripple</code> <p>Whether the slide toggle has a ripple.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>tab_index</code> <p>Tabindex of slide toggle.</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>checked</code> <p>Whether the slide-toggle element is checked or not.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>hide_icon</code> <p>Whether to hide the icon inside of the slide toggle.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/slide_toggle/#mesop.components.slide_toggle.slide_toggle.content_slide_toggle","title":"<code>content_slide_toggle</code>","text":"<p>Creates a Slide toggle component which is a composite component. Typically, you would use a text or icon component as a child.</p> <p>Intended for advanced use cases.</p> PARAMETER DESCRIPTION <code>on_change</code> <p>An event will be dispatched each time the slide-toggle changes its value.</p> <p> TYPE: <code>Callable[[SlideToggleChangeEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>label_position</code> <p>Whether the label should appear after or before the slide-toggle. Defaults to 'after'.</p> <p> TYPE: <code>Literal['before', 'after']</code> DEFAULT: <code>'after'</code> </p> <code>required</code> <p>Whether the slide-toggle is required.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>color</code> <p>Palette color of slide toggle.</p> <p> TYPE: <code>Literal['primary', 'accent', 'warn'] | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether the slide toggle is disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>disable_ripple</code> <p>Whether the slide toggle has a ripple.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>tab_index</code> <p>Tabindex of slide toggle.</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>checked</code> <p>Whether the slide-toggle element is checked or not.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>hide_icon</code> <p>Whether to hide the icon inside of the slide toggle.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/slide_toggle/#mesop.components.slide_toggle.slide_toggle.SlideToggleChangeEvent","title":"<code>SlideToggleChangeEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>MesopEvent</code></p> <p>Event triggered when the slide toggle state changes.</p> ATTRIBUTE DESCRIPTION <code>key</code> <p>Key of the component that emitted this event.</p> <p> TYPE: <code>str</code> </p>"},{"location":"components/slider/","title":"Slider","text":""},{"location":"components/slider/#overview","title":"Overview","text":"<p>Slider allows the user to select from a range of values and is based on the Angular Material slider component.</p>"},{"location":"components/slider/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\n@me.stateclass\nclass State:\n  initial_input_value: str = \"50.0\"\n  initial_slider_value: float = 50.0\n  slider_value: float = 50.0\n\n\n@me.page(\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://google.github.io\"]\n  ),\n  path=\"/slider\",\n)\ndef app():\n  state = me.state(State)\n  with me.box(style=me.Style(display=\"flex\", flex_direction=\"column\")):\n    me.input(\n      label=\"Slider value\", value=state.initial_input_value, on_input=on_input\n    )\n    me.slider(on_value_change=on_value_change, value=state.initial_slider_value)\n    me.text(text=f\"Value: {me.state(State).slider_value}\")\n\n\ndef on_value_change(event: me.SliderValueChangeEvent):\n  state = me.state(State)\n  state.slider_value = event.value\n  state.initial_input_value = str(state.slider_value)\n\n\ndef on_input(event: me.InputEvent):\n  state = me.state(State)\n  state.initial_slider_value = float(event.value)\n  state.slider_value = state.initial_slider_value\n</code></pre>"},{"location":"components/slider/#api","title":"API","text":""},{"location":"components/slider/#mesop.components.slider.slider.slider","title":"<code>slider</code>","text":"<p>Creates a Slider component.</p> PARAMETER DESCRIPTION <code>on_value_change</code> <p>An event will be dispatched each time the slider changes its value.</p> <p> TYPE: <code>Callable[[SliderValueChangeEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>value</code> <p>Initial value. If updated, the slider will be updated with a new initial value.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>min</code> <p>The minimum value that the slider can have.</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>max</code> <p>The maximum value that the slider can have.</p> <p> TYPE: <code>float</code> DEFAULT: <code>100</code> </p> <code>step</code> <p>The values at which the thumb will snap.</p> <p> TYPE: <code>float</code> DEFAULT: <code>1</code> </p> <code>disabled</code> <p>Whether the slider is disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>discrete</code> <p>Whether the slider displays a numeric value label upon pressing the thumb.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>show_tick_marks</code> <p>Whether the slider displays tick marks along the slider track.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>color</code> <p>Palette color of the slider.</p> <p> TYPE: <code>Literal['primary', 'accent', 'warn']</code> DEFAULT: <code>'primary'</code> </p> <code>disable_ripple</code> <p>Whether ripples are disabled in the slider.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>style</code> <p>Style for the component.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/slider/#mesop.components.slider.slider.SliderValueChangeEvent","title":"<code>SliderValueChangeEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>MesopEvent</code></p> <p>Event triggered when the slider value changes.</p> ATTRIBUTE DESCRIPTION <code>value</code> <p>The new value of the slider after the change.</p> <p> TYPE: <code>float</code> </p> <code>key</code> <p>Key of the component that emitted this event.</p> <p> TYPE: <code>str</code> </p>"},{"location":"components/table/","title":"Table","text":""},{"location":"components/table/#overview","title":"Overview","text":"<p>Table allows the user to render an Angular Material table component from a Pandas data frame.</p>"},{"location":"components/table/#examples","title":"Examples","text":"<pre><code>from datetime import datetime\n\nimport numpy as np\nimport pandas as pd\n\nimport mesop as me\n\n\n@me.stateclass\nclass State:\n  selected_cell: str = \"No cell selected.\"\n\n\ndf = pd.DataFrame(\n  data={\n    \"NA\": [pd.NA, pd.NA, pd.NA],\n    \"Index\": [3, 2, 1],\n    \"Bools\": [True, False, np.bool_(True)],\n    \"Ints\": [101, 90, np.int64(-55)],\n    \"Floats\": [2.3, 4.5, np.float64(-3.000000003)],\n    \"Strings\": [\"Hello\", \"World\", \"!\"],\n    \"Date Times\": [\n      pd.Timestamp(\"20180310\"),\n      pd.Timestamp(\"20230310\"),\n      datetime(2023, 1, 1, 12, 12, 1),\n    ],\n  }\n)\n\n\n@me.page(\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://google.github.io\"]\n  ),\n  path=\"/table\",\n)\ndef app():\n  state = me.state(State)\n\n  with me.box(style=me.Style(padding=me.Padding.all(10), width=500)):\n    me.table(\n      df,\n      on_click=on_click,\n      header=me.TableHeader(sticky=True),\n      columns={\n        \"NA\": me.TableColumn(sticky=True),\n        \"Index\": me.TableColumn(sticky=True),\n      },\n    )\n\n  with me.box(\n    style=me.Style(\n      background=\"#ececec\",\n      margin=me.Margin.all(10),\n      padding=me.Padding.all(10),\n    )\n  ):\n    me.text(state.selected_cell)\n\n\ndef on_click(e: me.TableClickEvent):\n  state = me.state(State)\n  state.selected_cell = (\n    f\"Selected cell at col {e.col_index} and row {e.row_index} \"\n    f\"with value {str(df.iat[e.row_index, e.col_index])}\"\n  )\n</code></pre>"},{"location":"components/table/#api","title":"API","text":""},{"location":"components/table/#mesop.components.table.table.table","title":"<code>table</code>","text":"<p>This function creates a table from Pandas data frame</p> PARAMETER DESCRIPTION <code>data_frame</code> <p>Pandas data frame.</p> <p> TYPE: <code>Any</code> </p> <code>on_click</code> <p>Triggered when a table cell is clicked. The click event is a native browser event.</p> <p> TYPE: <code>Callable[[TableClickEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>header</code> <p>Configures table header to be sticky or not.</p> <p> TYPE: <code>TableHeader | None</code> DEFAULT: <code>None</code> </p> <code>columns</code> <p>Configures table columns to be sticky or not. The key is the name of the column.</p> <p> TYPE: <code>dict[str, TableColumn] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/text/","title":"Text","text":""},{"location":"components/text/#overview","title":"Overview","text":"<p>Text displays text as-is. If you have markdown text, use the Markdown component.</p>"},{"location":"components/text/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\n@me.page(\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://google.github.io\"]\n  ),\n  path=\"/text\",\n)\ndef text():\n  me.text(text=\"headline-1: Hello, world!\", type=\"headline-1\")\n  me.text(text=\"headline-2: Hello, world!\", type=\"headline-2\")\n  me.text(text=\"headline-3: Hello, world!\", type=\"headline-3\")\n  me.text(text=\"headline-4: Hello, world!\", type=\"headline-4\")\n  me.text(text=\"headline-5: Hello, world!\", type=\"headline-5\")\n  me.text(text=\"headline-6: Hello, world!\", type=\"headline-6\")\n  me.text(text=\"subtitle-1: Hello, world!\", type=\"subtitle-1\")\n  me.text(text=\"subtitle-2: Hello, world!\", type=\"subtitle-2\")\n  me.text(text=\"body-1: Hello, world!\", type=\"body-1\")\n  me.text(text=\"body-2: Hello, world!\", type=\"body-2\")\n  me.text(text=\"caption: Hello, world!\", type=\"caption\")\n  me.text(text=\"button: Hello, world!\", type=\"button\")\n</code></pre>"},{"location":"components/text/#api","title":"API","text":""},{"location":"components/text/#mesop.components.text.text.text","title":"<code>text</code>","text":"<p>Create a text component.</p> PARAMETER DESCRIPTION <code>text</code> <p>The text to display.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>type</code> <p>The typography level for the text.</p> <p> TYPE: <code>Literal['headline-1', 'headline-2', 'headline-3', 'headline-4', 'headline-5', 'headline-6', 'subtitle-1', 'subtitle-2', 'body-1', 'body-2', 'caption', 'button'] | None</code> DEFAULT: <code>None</code> </p> <code>style</code> <p>Style to apply to component. Follows HTML Element inline style API.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/text_to_image/","title":"Text to Image","text":""},{"location":"components/text_to_image/#overview","title":"Overview","text":"<p>Text To Image component is a quick and simple way of getting started with Mesop. Text To Image is part of Mesop Labs.</p>"},{"location":"components/text_to_image/#examples","title":"Examples","text":"<pre><code>import mesop as me\nimport mesop.labs as mel\n\n\n@me.page(\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://google.github.io\"]\n  ),\n  path=\"/text_to_image\",\n  title=\"Text to Image Example\",\n)\ndef app():\n  mel.text_to_image(\n    generate_image,\n    title=\"Text to Image Example\",\n  )\n\n\ndef generate_image(prompt: str):\n  return \"https://www.google.com/logos/doodles/2024/earth-day-2024-6753651837110453-2xa.gif\"\n</code></pre>"},{"location":"components/text_to_image/#api","title":"API","text":""},{"location":"components/text_to_image/#mesop.labs.text_to_image.text_to_image","title":"<code>text_to_image</code>","text":"<p>Creates a simple UI which takes in a text input and returns an image output.</p> <p>This function creates event handlers for text input and output operations using the provided function <code>transform</code> to process the input and generate the image output.</p> PARAMETER DESCRIPTION <code>transform</code> <p>Function that takes in a string input and returns a URL to an image or a base64 encoded image.</p> <p> TYPE: <code>Callable[[str], str]</code> </p> <code>title</code> <p>Headline text to display at the top of the UI.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/text_to_text/","title":"Text to Text","text":""},{"location":"components/text_to_text/#overview","title":"Overview","text":"<p>Text to text component allows you to take in user inputted text and return a transformed text. This is part of Mesop Labs.</p>"},{"location":"components/text_to_text/#examples","title":"Examples","text":"<pre><code>import mesop as me\nimport mesop.labs as mel\n\n\n@me.page(\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://google.github.io\"]\n  ),\n  path=\"/text_to_text\",\n  title=\"Text to Text Example\",\n)\ndef app():\n  mel.text_to_text(\n    upper_case_stream,\n    title=\"Text to Text Example\",\n  )\n\n\ndef upper_case_stream(s: str):\n  return \"Echo: \" + s\n</code></pre>"},{"location":"components/text_to_text/#api","title":"API","text":""},{"location":"components/text_to_text/#mesop.labs.text_to_text.text_to_text","title":"<code>text_to_text</code>","text":"<p>Creates a simple UI which takes in a text input and returns a text output.</p> <p>This function creates event handlers for text input and output operations using the provided transform function to process the input and generate the output.</p> PARAMETER DESCRIPTION <code>transform</code> <p>Function that takes in a string input and either returns or yields a string output.</p> <p> TYPE: <code>Callable[[str], Generator[str, None, None] | str]</code> </p> <code>title</code> <p>Headline text to display at the top of the UI</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>transform_mode</code> <p>Specifies how the output should be updated when yielding an output using a generator.             - \"append\": Concatenates each new piece of text to the existing output.             - \"replace\": Replaces the existing output with each new piece of text.</p> <p> TYPE: <code>Literal['append', 'replace']</code> DEFAULT: <code>'append'</code> </p>"},{"location":"components/text_to_text/#mesop.labs.text_to_text.text_io","title":"<code>text_io</code>","text":"<p>Deprecated: Use <code>text_to_text</code> instead which provides the same functionality with better default settings.</p> <p>This function creates event handlers for text input and output operations using the provided transform function to process the input and generate the output.</p> PARAMETER DESCRIPTION <code>transform</code> <p>Function that takes in a string input and either returns or yields a string output.</p> <p> TYPE: <code>Callable[[str], Generator[str, None, None] | str]</code> </p> <code>title</code> <p>Headline text to display at the top of the UI</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>transform_mode</code> <p>Specifies how the output should be updated when yielding an output using a generator.             - \"append\": Concatenates each new piece of text to the existing output.             - \"replace\": Replaces the existing output with each new piece of text.</p> <p> TYPE: <code>Literal['append', 'replace']</code> DEFAULT: <code>'replace'</code> </p>"},{"location":"components/textarea/","title":"Textarea","text":""},{"location":"components/textarea/#overview","title":"Overview","text":"<p>Textarea allows the user to type in a value and is based on the Angular Material input component for <code>&lt;textarea&gt;</code>.</p> <p>This is similar to Input, but Textarea is better suited for long text inputs.</p>"},{"location":"components/textarea/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\n@me.stateclass\nclass State:\n  input: str = \"\"\n\n\ndef on_input(e: me.InputEvent):\n  state = me.state(State)\n  state.input = e.value\n\n\n@me.page(\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://google.github.io\"]\n  ),\n  path=\"/textarea\",\n)\ndef app():\n  s = me.state(State)\n  me.textarea(label=\"Basic input\", on_input=on_input)\n  me.text(text=s.input)\n</code></pre>"},{"location":"components/textarea/#api","title":"API","text":""},{"location":"components/textarea/#mesop.components.input.input.textarea","title":"<code>textarea</code>","text":"<p>Creates a Textarea component.</p> PARAMETER DESCRIPTION <code>label</code> <p>Label for input.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>autosize</code> <p>If True, the textarea will automatically adjust its height to fit the content, up to the max_rows limit.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>min_rows</code> <p>The minimum number of rows the textarea will display.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>max_rows</code> <p>The maximum number of rows the textarea will display.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>on_input</code> <p>input is a native browser event.</p> <p> TYPE: <code>Callable[[InputEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>rows</code> <p>The number of lines to show in the text area.</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> <code>appearance</code> <p>The form field appearance style.</p> <p> TYPE: <code>Literal['fill', 'outline']</code> DEFAULT: <code>'fill'</code> </p> <code>style</code> <p>Style for input.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether it's disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>placeholder</code> <p>Placeholder value</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>required</code> <p>Whether it's required</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>value</code> <p>Initial value.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>readonly</code> <p>Whether the element is readonly.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>hide_required_marker</code> <p>Whether the required marker should be hidden.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>color</code> <p>The color palette for the form field.</p> <p> TYPE: <code>Literal['primary', 'accent', 'warn']</code> DEFAULT: <code>'primary'</code> </p> <code>float_label</code> <p>Whether the label should always float or float as the user types.</p> <p> TYPE: <code>Literal['always', 'auto']</code> DEFAULT: <code>'auto'</code> </p> <code>subscript_sizing</code> <p>Whether the form field should reserve space for one line of hint/error text (default) or to have the spacing grow from 0px as needed based on the size of the hint/error content. Note that when using dynamic sizing, layout shifts will occur when hint/error text changes.</p> <p> TYPE: <code>Literal['fixed', 'dynamic']</code> DEFAULT: <code>'fixed'</code> </p> <code>hint_label</code> <p>Text for the form field hint.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/tooltip/","title":"Tooltip","text":""},{"location":"components/tooltip/#overview","title":"Overview","text":"<p>Tooltip is based on the Angular Material tooltip component.</p>"},{"location":"components/tooltip/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\n@me.page(\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://google.github.io\"]\n  ),\n  path=\"/tooltip\",\n)\ndef app():\n  with me.tooltip(message=\"Tooltip message\"):\n    me.text(text=\"Hello, World\")\n</code></pre>"},{"location":"components/tooltip/#api","title":"API","text":""},{"location":"components/tooltip/#mesop.components.tooltip.tooltip.tooltip","title":"<code>tooltip</code>","text":"<p>Creates a Tooltip component. Tooltip is a composite component.</p> PARAMETER DESCRIPTION <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>position</code> <p>Allows the user to define the position of the tooltip relative to the parent element</p> <p> TYPE: <code>Literal['left', 'right', 'above', 'below', 'before', 'after']</code> DEFAULT: <code>'left'</code> </p> <code>position_at_origin</code> <p>Whether tooltip should be relative to the click or touch origin instead of outside the element bounding box.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>disabled</code> <p>Disables the display of the tooltip.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>show_delay_ms</code> <p>The default delay in ms before showing the tooltip after show is called</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>hide_delay_ms</code> <p>The default delay in ms before hiding the tooltip after hide is called</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>message</code> <p>The message to be displayed in the tooltip</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p>"},{"location":"components/uploader/","title":"Uploader","text":""},{"location":"components/uploader/#overview","title":"Overview","text":"<p>Uploader is the equivalent of an <code>&lt;input type=\"file&gt;</code> HTML element except it uses a custom UI that better matches the look of Angular Material Components.</p>"},{"location":"components/uploader/#examples","title":"Examples","text":"<pre><code>import base64\n\nimport mesop as me\n\n\n@me.stateclass\nclass State:\n  name: str\n  size: int\n  mime_type: str\n  contents: str\n\n\n@me.page(\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://google.github.io\"]\n  ),\n  path=\"/uploader\",\n)\ndef app():\n  state = me.state(State)\n  me.uploader(\n    label=\"Upload Image\",\n    accepted_file_types=[\"image/jpeg\", \"image/png\"],\n    on_upload=handle_upload,\n  )\n\n  if state.contents:\n    with me.box(style=me.Style(margin=me.Margin.all(10))):\n      me.text(f\"File name: {state.name}\")\n      me.text(f\"File size: {state.size}\")\n      me.text(f\"File type: {state.mime_type}\")\n\n    with me.box(style=me.Style(margin=me.Margin.all(10))):\n      me.image(src=state.contents)\n\n\ndef handle_upload(event: me.UploadEvent):\n  state = me.state(State)\n  state.name = event.file.name\n  state.size = event.file.size\n  state.mime_type = event.file.mime_type\n  state.contents = f\"data:{event.file.mime_type};base64,{base64.b64encode(event.file.getvalue()).decode()}\"\n</code></pre>"},{"location":"components/uploader/#api","title":"API","text":""},{"location":"components/uploader/#mesop.components.uploader.uploader.uploader","title":"<code>uploader</code>","text":"<p>This function creates an uploader.</p> PARAMETER DESCRIPTION <code>label</code> <p>Upload button label.</p> <p> TYPE: <code>str</code> </p> <code>accepted_file_types</code> <p>List of accepted file types. See the accept parameter.</p> <p> TYPE: <code>Sequence[str] | None</code> DEFAULT: <code>None</code> </p> <code>on_upload</code> <p>File upload event handler.</p> <p> TYPE: <code>Callable[[UploadEvent], Any] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/uploader/#mesop.components.uploader.uploader.UploadEvent","title":"<code>UploadEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>MesopEvent</code></p> <p>Event for file uploads.</p> ATTRIBUTE DESCRIPTION <code>file</code> <p>Uploaded file.</p> <p> TYPE: <code>UploadedFile</code> </p>"},{"location":"components/uploader/#mesop.components.uploader.uploader.UploadedFile","title":"<code>UploadedFile</code>","text":"<p>               Bases: <code>BytesIO</code></p> <p>Uploaded file contents and metadata.</p>"},{"location":"components/video/","title":"Video","text":""},{"location":"components/video/#overview","title":"Overview","text":"<p>Video is the equivalent of an <code>&lt;video&gt;</code> HTML element. Video displays the browser's native video controls.</p>"},{"location":"components/video/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\n@me.page(\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://google.github.io\"]\n  ),\n  path=\"/video\",\n)\ndef app():\n  me.video(\n    src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.webm\",\n    style=me.Style(height=300, width=300),\n  )\n</code></pre>"},{"location":"components/video/#api","title":"API","text":""},{"location":"components/video/#mesop.components.video.video.video","title":"<code>video</code>","text":"<p>Creates a video.</p> PARAMETER DESCRIPTION <code>src</code> <p>URL of the video source</p> <p> TYPE: <code>str</code> </p> <code>style</code> <p>The style to apply to the image, such as width and height.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p>"},{"location":"getting_started/installing/","title":"Installing","text":"<p>If you are familiar with setting up a Python environment, then run the following command in your terminal:</p> <pre><code>$ pip install mesop\n</code></pre> <p>If you're not familiar with setting up a Python environment, follow one of the options below.</p>"},{"location":"getting_started/installing/#a-colab-recommended-for-beginners","title":"A. Colab (Recommended for beginners)","text":"<p>Colab is a free hosted Jupyter notebook product provided by Google.</p> <p>Try Mesop on Colab: </p>"},{"location":"getting_started/installing/#b-command-line","title":"B. Command-line","text":"<p>If you'd like to run Mesop locally on the command-line, follow these steps.</p> <p>Pre-requisites: Make sure you have Python version 3.10 or later installed by running:</p> <pre><code>python --version\n</code></pre> <p>If you don't, please download Python.</p>"},{"location":"getting_started/installing/#create-a-venv-environment","title":"Create a venv environment","text":"<ol> <li> <p>Open the terminal and navigate to a directory: <code>cd foo</code></p> </li> <li> <p>Create a virtual environment by using venv, which will avoid Python environment issues. Run:</p> </li> </ol> <pre><code>python -m venv .venv\n</code></pre> <ol> <li> <p>Activate your virtual environment:</p> <ul> <li> <p>macOS and Linux:</p> <pre><code>source .venv/bin/activate\n</code></pre> </li> <li> <p>Windows command prompt:</p> <pre><code>.venv\\Scripts\\activate.bat\n</code></pre> </li> <li> <p>Windows PowerShell</p> <pre><code>.venv\\Scripts\\Activate.ps1\n</code></pre> </li> </ul> </li> </ol> <p>Once you've activated the virtual environment, you will see \".venv\" at the start of your terminal prompt.</p> <ol> <li>Install mesop:</li> </ol> <pre><code>$ pip install mesop\n</code></pre> <p>Make sure your Python environment is setup correctly by running a hello world app.</p> <p>Copy the following hello world code into a file <code>hello_world.py</code>:</p> hello_world.py<pre><code>import mesop as me\n\n\n@me.page()\ndef app():\n  me.text(\"Hello World\")\n</code></pre> <p>Then run the following command in your terminal:</p> <pre><code>$ mesop hello_world.py\n</code></pre> <p>Open the URL printed in the terminal (i.e. http://localhost:32123) in the browser to see your Mesop app loaded.</p> <p>If you make changes to the code (e.g. change <code>\"Hello World\"</code> to <code>\"Hi\"</code>), the Mesop app should be automatically hot reloaded.</p>"},{"location":"getting_started/quickstart/","title":"Quickstart","text":"<p>Let's build a simple interactive Mesop app.</p>"},{"location":"getting_started/quickstart/#before-you-start","title":"Before you start","text":"<p>Make sure you've installed Mesop, otherwise please follow the Installing Guide.</p>"},{"location":"getting_started/quickstart/#text-to-text-app","title":"Text to text app","text":"<p>The simplest way to get started with Mesop is to use the <code>text_to_text</code> component</p> <pre><code>import mesop as me\nimport mesop.labs as mel\n\n\n@me.page(\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://google.github.io\"]\n  ),\n  path=\"/text_to_text\",\n  title=\"Text to Text Example\",\n)\ndef app():\n  mel.text_to_text(\n    upper_case_stream,\n    title=\"Text to Text Example\",\n  )\n\n\ndef upper_case_stream(s: str):\n  return \"Echo: \" + s\n</code></pre> <p>The rest of this guide will show you step-by-step how something like text_to_text is implemented.</p>"},{"location":"getting_started/quickstart/#hello-world-app","title":"Hello World app","text":"<p>Let's start by creating a simple Hello World app in Mesop:</p> <pre><code>import mesop as me\n\n\n@me.page(path=\"/hello_world\")\ndef app():\n  me.text(\"Hello World\")\n</code></pre> <p>This simple example demonstrates a few things:</p> <ul> <li>Every Mesop app starts with <code>import mesop as me</code>. This is the only recommended way to import mesop, otherwise your app may break in the future because you may be relying on internal implementation details.</li> <li><code>@me.page</code> is a function decorator which makes a function a root component for a particular path. If you omit the <code>path</code> parameter, this is the equivalent of doing <code>@me.page(path=\"/\")</code>.</li> <li><code>app</code> is a Python function that we will call a component because it's creating Mesop components in the body.</li> </ul>"},{"location":"getting_started/quickstart/#components","title":"Components","text":"<p>Components are the building blocks of a Mesop application. A Mesop application is essentially a tree of components.</p> <p>Let's explain the different kinds of components in Mesop:</p> <ul> <li>Mesop comes built-in with native components. These are components implemented using Angular/Javascript. Many of these components wrap Angular Material components.</li> <li>You can also create your own components which are called user-defined components. These are essentially Python functions like <code>app</code> in the previous example.</li> </ul>"},{"location":"getting_started/quickstart/#counter-app","title":"Counter app","text":"<p>Let's build a more complex app to demonstrate Mesop's interactivity features.</p> <pre><code>import mesop as me\n\n\n@me.stateclass\nclass State:\n  clicks: int\n\n\ndef button_click(event: me.ClickEvent):\n  state = me.state(State)\n  state.clicks += 1\n\n\n@me.page(path=\"/counter\")\ndef main():\n  state = me.state(State)\n  me.text(f\"Clicks: {state.clicks}\")\n  me.button(\"Increment\", on_click=button_click)\n</code></pre> <p>This app allows the user to click on a button and increment a counter, which is shown to the user as \"Clicks: #\".</p> <p>Let's walk through this step-by-step.</p>"},{"location":"getting_started/quickstart/#state","title":"State","text":"<p>The <code>State</code> class represents the application state for a particular browser session. This means every user session has its own instance of <code>State</code>.</p> <p><code>@me.stateclass</code> is a class decorator which is similar to Python's dataclass but also sets default value based on type hints and allows Mesop to inject the class as shown next.</p> <p>Note: Everything in a state class must be serializable because it's sent between the server and browser.</p>"},{"location":"getting_started/quickstart/#event-handler","title":"Event handler","text":"<p>The <code>button_click</code> function is an event handler. An event handler has a single parameter, <code>event</code>, which can contain a value (this will be shown in the next example). An event handler is responsible for updating state based on the incoming event.</p> <p><code>me.state(State)</code> retrieves the instance of the state class for the current session.</p>"},{"location":"getting_started/quickstart/#component","title":"Component","text":"<p>Like the previous example, <code>main</code> is a Mesop component function which is decorated with <code>page</code> to mark it as a root component for a path.</p> <p>Similar to the event handler, we can retrieve the state in a component function by calling <code>me.state(State)</code>.</p> <p>Note: it's not safe to mutate state inside a component function. All mutations must be done in an event handler.</p> <p>Rendering dynamic values in Mesop is simple because you can do standard Python string interpolation use f-strings:</p> <pre><code>me.text(f\"Clicks: {state.clicks}\")\n</code></pre> <p>The button component demonstrates connecting an event handler to a component. Whenever a click event is triggered by the component, the registered event handler function is called.:</p> <pre><code>me.button(\"Increment\", on_click=button_click)\n</code></pre> <p>In summary, you've learned how to define a state class, an event handler and wire them together using interactive components.</p>"},{"location":"getting_started/quickstart/#whats-next","title":"What's next","text":"<p>At this point, you've learned all the basics of building a Mesop app and now you should be able to understand how Text to Text is implemented under the hood.</p> <p>To learn more about Mesop, I recommend reading the Guides and then spend time looking at the examples on GitHub. As you build your own applications, you'll want to reference the Components docs.</p>"},{"location":"guides/auth/","title":"Auth","text":"<p>To ensure that the users of your Mesop application are authenticated, this guide provides a detailed, step-by-step process on how to integrate Firebase Authentication with Mesop using a web component.</p> <p>Mesop is designed to be auth provider agnostic, allowing you to integrate any auth library you prefer, whether it's on the client-side (JavaScript) or server-side (Python). You can support sign-ins, including social sign-ins like Google's or any others that you prefer. The general approach involves signing in on the client-side first, then transmitting an auth token to the server-side.</p>"},{"location":"guides/auth/#firebase-authentication","title":"Firebase Authentication","text":"<p>This guide will walk you through the process of integrating Firebase Authentication with Mesop using a custom web component.</p> <p>Pre-requisites: You will need to create a Firebase account and project. It's free to get started with Firebase and use Firebase auth for small projects, but refer to the pricing page for the most up-to-date information.</p> <p>We will be using three libraries from Firebase to build an end-to-end auth flow:</p> <ul> <li>Firebase Web SDK: Allows you to call Firebase services from your client-side JavaScript code.</li> <li>FirebaseUI Web: Provides a simple, customizable auth UI integrated with the Firebase Web SDK.</li> <li>Firebase Admin SDK (Python): Provides server-side libraries to integrate Firebase services, including Authentication, into your Python applications.</li> </ul> <p>Let's dive into how we will use each one in our Mesop app.</p>"},{"location":"guides/auth/#web-component","title":"Web component","text":"<p>The Firebase Authentication web component is a custom component built for handling the user authentication process. It's implemented using Lit, a simple library for building lightweight web components.</p>"},{"location":"guides/auth/#js-code","title":"JS code","text":"firebase_auth_component.js<pre><code>import {\n  LitElement,\n  html,\n} from 'https://cdn.jsdelivr.net/gh/lit/dist@3/core/lit-core.min.js';\n\nimport 'https://www.gstatic.com/firebasejs/10.0.0/firebase-app-compat.js';\nimport 'https://www.gstatic.com/firebasejs/10.0.0/firebase-auth-compat.js';\nimport 'https://www.gstatic.com/firebasejs/ui/6.1.0/firebase-ui-auth.js';\n\n// TODO: replace this with your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: 'AIzaSyAQR9T7sk1lElXTEUBYHx7jv7d_Bs2zt-s',\n  authDomain: 'mesop-auth-test.firebaseapp.com',\n  projectId: 'mesop-auth-test',\n  storageBucket: 'mesop-auth-test.appspot.com',\n  messagingSenderId: '565166920272',\n  appId: '1:565166920272:web:4275481621d8e5ba91b755',\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nvar uiConfig = {\n  // TODO: change this to your Mesop page path.\n  signInSuccessUrl: '/web_component/firebase_auth/firebase_auth_app',\n  signInOptions: [firebase.auth.GoogleAuthProvider.PROVIDER_ID],\n  // tosUrl and privacyPolicyUrl accept either url string or a callback\n  // function.\n  // Terms of service url/callback.\n  tosUrl: '&lt;your-tos-url&gt;',\n  // Privacy policy url/callback.\n  privacyPolicyUrl: function () {\n    window.location.assign('&lt;your-privacy-policy-url&gt;');\n  },\n};\n\n// Initialize the FirebaseUI Widget using Firebase.\nvar ui = new firebaseui.auth.AuthUI(firebase.auth());\n\nclass FirebaseAuthComponent extends LitElement {\n  static properties = {\n    isSignedIn: {type: Boolean},\n    authChanged: {type: String},\n  };\n\n  constructor() {\n    super();\n    this.isSignedIn = false;\n  }\n\n  createRenderRoot() {\n    // Render in light DOM so firebase-ui-auth works.\n    return this;\n  }\n\n  firstUpdated() {\n    firebase.auth().onAuthStateChanged(\n      async (user) =&gt; {\n        if (user) {\n          this.isSignedIn = true;\n          const token = await user.getIdToken();\n          this.dispatchEvent(new MesopEvent(this.authChanged, token));\n        } else {\n          this.isSignedIn = false;\n          this.dispatchEvent(new MesopEvent(this.authChanged, ''));\n        }\n      },\n      function (error) {\n        console.log(error);\n      },\n    );\n\n    ui.start('#firebaseui-auth-container', uiConfig);\n  }\n\n  signOut() {\n    firebase.auth().signOut();\n  }\n\n  render() {\n    return html`\n      &lt;div\n        id=\"firebaseui-auth-container\"\n        style=\"${this.isSignedIn ? 'display: none' : ''}\"\n      &gt;&lt;/div&gt;\n      &lt;div\n        class=\"firebaseui-container firebaseui-page-provider-sign-in firebaseui-id-page-provider-sign-in firebaseui-use-spinner\"\n        style=\"${this.isSignedIn ? '' : 'display: none'}\"\n      &gt;\n        &lt;button\n          style=\"background-color:#ffffff\"\n          class=\"firebaseui-idp-button mdl-button mdl-js-button mdl-button--raised firebaseui-idp-google firebaseui-id-idp-button\"\n          @click=\"${this.signOut}\"\n        &gt;\n          &lt;span class=\"firebaseui-idp-text firebaseui-idp-text-long\"\n            &gt;Sign out&lt;/span\n          &gt;\n        &lt;/button&gt;\n      &lt;/div&gt;\n    `;\n  }\n}\n\ncustomElements.define('firebase-auth-component', FirebaseAuthComponent);\n</code></pre> <p>What you need to do:</p> <ul> <li>Replace <code>firebaseConfig</code> with your Firebase project's config. Read the Firebase docs to learn how to get yours.</li> <li>Replace the URLs <code>signInSuccessUrl</code> with your Mesop page path and <code>tosUrl</code> and <code>privacyPolicyUrl</code> to your terms and services and privacy policy page respectively.</li> </ul> <p>How it works:</p> <ul> <li>This creates a simple and configurable auth UI using FirebaseUI Web.</li> <li>Once the user has signed in, then a sign out button is shown.</li> <li>Whenever the user signs in or out, the web component dispatches an event to the Mesop server with the auth token, or absence of it.</li> <li>See our web component docs for more details.</li> </ul>"},{"location":"guides/auth/#python-code","title":"Python code","text":"firebase_auth_component.py<pre><code>from typing import Any, Callable\n\nimport mesop.labs as mel\n\n\n@mel.web_component(path=\"./firebase_auth_component.js\")\ndef firebase_auth_component(on_auth_changed: Callable[[mel.WebEvent], Any]):\n  return mel.insert_web_component(\n    name=\"firebase-auth-component\",\n    events={\n      \"authChanged\": on_auth_changed,\n    },\n  )\n</code></pre> <p>How it works:</p> <ul> <li>Implements the Python side of the Mesop web component. See our web component docs for more details.</li> </ul>"},{"location":"guides/auth/#integrating-into-the-app","title":"Integrating into the app","text":"<p>Let's put it all together:</p> firebase_auth_app.py<pre><code>import firebase_admin\nfrom firebase_admin import auth\n\nimport mesop as me\nimport mesop.labs as mel\nfrom mesop.examples.web_component.firebase_auth.firebase_auth_component import (\n  firebase_auth_component,\n)\n\n# Avoid re-initializing firebase app (useful for avoiding warning message because of hot reloads).\nif firebase_admin._DEFAULT_APP_NAME not in firebase_admin._apps:\n  default_app = firebase_admin.initialize_app()\n\n\n@me.page(\n  path=\"/web_component/firebase_auth/firebase_auth_app\",\n  stylesheets=[\n    \"https://www.gstatic.com/firebasejs/ui/6.1.0/firebase-ui-auth.css\"\n  ],\n  # Loosen the security policy so the firebase JS libraries work.\n  security_policy=me.SecurityPolicy(\n    dangerously_disable_trusted_types=True,\n    allowed_connect_srcs=[\"*.googleapis.com\"],\n    allowed_script_srcs=[\"*.google.com\"],\n  ),\n)\ndef page():\n  email = me.state(State).email\n  if email:\n    me.text(\"Signed in email: \" + email)\n  else:\n    me.text(\"Not signed in\")\n  firebase_auth_component(on_auth_changed=on_auth_changed)\n\n\n@me.stateclass\nclass State:\n  email: str\n\n\ndef on_auth_changed(e: mel.WebEvent):\n  print(\"AUTH\", e.value)\n  firebaseAuthToken = e.value\n  if not firebaseAuthToken:\n    me.state(State).email = \"\"\n    return\n\n  decoded_token = auth.verify_id_token(firebaseAuthToken)\n  if decoded_token[\"email\"] != \"allowlisted.user@gmail.com\":\n    raise me.MesopUserException(\"Invalid user: \" + decoded_token[\"email\"])\n  me.state(State).email = decoded_token[\"email\"]\n</code></pre> <p>How it works:</p> <ul> <li>The <code>firebase_auth_app.py</code> module integrates the Firebase Auth web component into the Mesop app. It initializes the Firebase app, defines the page where the Firebase Auth web component will be used, and sets up the state to store the user's email.</li> <li>The <code>on_auth_changed</code> function is triggered whenever the user's authentication state changes. If the user is signed in, it verifies the user's ID token and stores the user's email in the state. If the user is not signed in, it clears the email from the state.</li> </ul>"},{"location":"guides/auth/#next-steps","title":"Next steps","text":"<p>Congrats! You've now built an authenticated app with Mesop from start to finish. Read the Firebase Auth docs to learn how to configure additional sign-in options and much more.</p>"},{"location":"guides/debugging/","title":"Debugging","text":"<p>VS Code is recomended for debugging your Mesop app, but you should be able to debug Mesop in other IDEs.</p>"},{"location":"guides/debugging/#debugging-in-vs-code","title":"Debugging in VS Code","text":"<p>Pre-requisite: ensure VS Code is downloaded.</p> <ol> <li> <p>Install the Python Debugger VS Code extension.</p> </li> <li> <p>Include the following in your <code>.vscode/launch.json</code>:</p> </li> </ol> <pre><code>{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Python: Remote Attach\",\n      \"type\": \"python\",\n      \"request\": \"attach\",\n      \"connect\": { \"host\": \"localhost\", \"port\": 5678 },\n      \"pathMappings\": [\n        { \"localRoot\": \"${workspaceFolder}\", \"remoteRoot\": \".\" }\n      ],\n      \"justMyCode\": true\n    }\n  ]\n}\n</code></pre> <ol> <li>At the top of your Mesop app (e.g. main.py), including the following snippet to start the debug server:</li> </ol> <pre><code>import debugpy\n\ndebugpy.listen(5678)\n</code></pre> <ol> <li>Connect to your debug server by going to the Run &amp; Debug tab in VS Code and selecting \"Python: Remote Attach\".</li> </ol> <p>Congrats you are now debugging your Mesop app!</p> <p>To learn more about Python debugging in VS code, read VS Code's Python debugging guide.</p>"},{"location":"guides/deployment/","title":"Deployment","text":"<p>To deploy your Mesop application, we recommend using Google Cloud Run because it's easy to get started and there's a free tier. However, it's possible to deploy your Mesop to other Cloud platforms.</p>"},{"location":"guides/deployment/#example-application","title":"Example application","text":""},{"location":"guides/deployment/#python","title":"Python","text":"<p><code>main.py</code> which is your Mesop application code:</p> main.py<pre><code>import mesop as me\n\n@me.page(title=\"Home\")\ndef home():\n  me.text(\"Hello, world\")\n</code></pre> <p>Note: if you choose to use a different filename than main.py, you will need to modify the <code>Procfile</code> below.</p>"},{"location":"guides/deployment/#procfile","title":"Procfile","text":"<p><code>Procfile</code> which configures <code>gunicorn</code> to run Mesop.</p> Procfile<pre><code>web: gunicorn --bind :8080 main:me\n</code></pre> <p>The <code>--bind: 8080</code> will run Mesop on port 8080.</p> <p>The <code>main:me</code> syntax is <code>$(MODULE_NAME):$(VARIABLE_NAME)</code>: (see Gunicorn docs for more details):</p> <ul> <li>Because the Mesop python file is <code>main.py</code>, the module name is <code>main</code>.</li> <li>By convention, we do <code>import mesop as me</code> so the <code>me</code> refers to the main Mesop library module which is also a callable (e.g. a function) that conforms to WSGI.</li> </ul>"},{"location":"guides/deployment/#requirementstxt","title":"requirements.txt","text":"<p><code>requirements.txt</code> specifies the Python dependencies needed. You may need to add additional dependencies depending on your use case.</p> requirements.txt<pre><code>mesop\nFlask==3.0.0\ngunicorn==20.1.0\nWerkzeug==3.0.1\n</code></pre>"},{"location":"guides/deployment/#pre-requisites","title":"Pre-requisites","text":"<p>You will need to create a Google Cloud account and install the <code>gcloud</code> CLI.</p>"},{"location":"guides/deployment/#deploy-to-google-cloud-run","title":"Deploy to Google Cloud Run","text":"<p>In your terminal, go to the application directory, which has the files listed above.</p> <p>Run the following command:</p> <pre><code>$ gcloud run deploy\n</code></pre> <p>Follow the instructions and then you should be able to access your deployed app.</p>"},{"location":"guides/interactivity/","title":"Interactivity","text":"<p>This guide continues from the Counter app example in Quickstart and explains advanced interactivity patterns for dealing with common use cases such as calling a slow blocking API call or a streaming API call.</p>"},{"location":"guides/interactivity/#intermediate-loading-state","title":"Intermediate loading state","text":"<p>If you are calling a slow blocking API (e.g. several seconds) to provide a better user experience, you may want to introduce a custom loading indicator for a specific event.</p> <p>Note: Mesop has a built-in loading indicator at the top of the page for all events.</p> <pre><code>import time\n\nimport mesop as me\n\n\ndef slow_blocking_api_call():\n  time.sleep(2)\n  return \"foo\"\n\n\n@me.stateclass\nclass State:\n  data: str\n  is_loading: bool\n\n\ndef button_click(event: me.ClickEvent):\n  state = me.state(State)\n  state.is_loading = True\n  yield\n  data = slow_blocking_api_call()\n  state.data = data\n  state.is_loading = False\n  yield\n\n\n@me.page(path=\"/loading\")\ndef main():\n  state = me.state(State)\n  if state.is_loading:\n    me.progress_spinner()\n  me.text(state.data)\n  me.button(\"Call API\", on_click=button_click)\n</code></pre> <p>In this example, our event handler is a Python generator function. Each <code>yield</code> statement yields control back to the Mesop framework and executes a render loop which results in a UI update.</p> <p>Before the first yield statement, we set <code>is_loading</code> to True on state so we can show a spinner while the user is waiting for the slow API call to complete.</p> <p>Before the second (and final) yield statement, we set <code>is_loading</code> to False, so we can hide the spinner and then we add the result of the API call to state so we can display that to the user.</p> <p>Tip: you must have a yield statement as the last line of a generator event handler function. Otherwise, any code after the final yield will not be executed.</p>"},{"location":"guides/interactivity/#streaming","title":"Streaming","text":"<p>This example builds off the previous Loading example and makes our event handler a generator function so we can incrementally update the UI.</p> <pre><code>from time import sleep\n\nimport mesop as me\n\n\ndef generate_str():\n  yield \"foo\"\n  sleep(1)\n  yield \"bar\"\n\n\n@me.stateclass\nclass State:\n  string: str = \"\"\n\n\ndef button_click(action: me.ClickEvent):\n  state = me.state(State)\n  for val in generate_str():\n    state.string += val\n    yield\n\n\n@me.page(path=\"/streaming\")\ndef main():\n  state = me.state(State)\n  me.button(\"click\", on_click=button_click)\n  me.text(text=f\"{state.string}\")\n</code></pre>"},{"location":"guides/interactivity/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guides/interactivity/#user-input-race-condition","title":"User input race condition","text":"<p>If you notice a race condition with user input (e.g. input or textarea) where sometimes the last few characters typed by the user is lost, you are probably unnecessarily setting the value of the component.</p> <p>See the following example using this anti-pattern :</p> Bad example<pre><code>@me.stateclass\nclass State:\n  input_value: str\n\ndef app():\n  state = me.state(State)\n  me.input(value=state.input_value, on_input=on_input)\n\ndef on_input(event: me.InputEvent):\n  state = me.state(State)\n  state.input_value = event.value\n</code></pre> <p>The problem is that the input value now has a race condition because it's being set by two sources:</p> <ol> <li>The server is setting the input value based on state.</li> <li>The client is setting the input value based on what the user is typing.</li> </ol> <p>The way to fix this is by not setting the input value from the server.</p> <p>The above example corrected would look like this :</p> Good example<pre><code>@me.stateclass\nclass State:\n  input_value: str\n\ndef app():\n  state = me.state(State)\n  me.input(on_input=on_input)\n\ndef on_input(event: me.InputEvent):\n  state = me.state(State)\n  state.input_value = event.value\n</code></pre>"},{"location":"guides/interactivity/#avoid-using-closure-variables-in-event-handler","title":"Avoid using closure variables in event handler","text":"<p>One subtle mistake when building a reusable component is to have the event handler use a closure variable like the following example:</p> Bad example of using closure variable<pre><code>@me.component\ndef link_component(url: str):\n   def on_click(event: me.ClickEvent):\n     me.navigate(url)\n  return me.button(url, on_click=on_click)\n\ndef app():\n    link_component(\"/1\")\n    link_component(\"/2\")\n</code></pre> <p>The problem with this above example is that Mesop only stores the last event handler. This means that both instances of the link_component will refer to the last <code>on_click</code> instance which references the same <code>url</code> closure variable set to <code>\"/2\"</code>. This almost always produces the wrong behavior.</p> <p>Instead, you will want to use the pattern of relying on the key in the event handler as demonstrated in the following example:</p> Good example of using key<pre><code>@me.component\ndef link_component(url: str):\n   def on_click(event: me.ClickEvent):\n     me.navigate(event.key)\n  return me.button(url, key=url, on_click=on_click)\n</code></pre> <p>For more info on using component keys, please refer to the Component Key docs.</p>"},{"location":"guides/labs/","title":"Labs","text":"<p>Mesop Labs is built on top of the core Mesop framework and may evolve in the future.</p>"},{"location":"guides/labs/#using-labs","title":"Using Labs","text":"<p>You will need to add an import statement to use labs:</p> <pre><code>import mesop.labs as mel\n</code></pre> <p>The code inside Mesop Labs is intended to be simple to understand so you can copy and customize it as needed.</p>"},{"location":"guides/multi_pages/","title":"Multi-Pages","text":"<p>You can define multi-page Mesop applications by using the page feature you learned from Quickstart.</p>"},{"location":"guides/multi_pages/#multi-page-setup","title":"Multi-page setup","text":"<pre><code>import mesop as me\n\n@me.page(path=\"/1\")\ndef page1():\n    me.text(\"page 1\")\n\n@me.page(path=\"/2\")\ndef page2():\n    me.text(\"page 2\")\n</code></pre> <p>Learn more about page configuration in the page API doc.</p>"},{"location":"guides/multi_pages/#navigation","title":"Navigation","text":"<p>If you have multiple pages, you will typically want to navigate from one page to another when the user clicks a button. You can use <code>me.navigate(\"/to/path\")</code> to navigate to another page.</p> <p>Example:</p> <pre><code>import mesop as me\n\n\ndef on_click(e: me.ClickEvent):\n  state = me.state(State)\n  state.count += 1\n  me.navigate(\"/multi_page_nav/page_2\")\n\n\n@me.page(path=\"/multi_page_nav\")\ndef main_page():\n  me.button(\"Navigate to Page 2\", on_click=on_click)\n\n\n@me.page(path=\"/multi_page_nav/page_2\")\ndef page_2():\n  state = me.state(State)\n  me.text(f\"Page 2 - count: {state.count}\")\n\n\n@me.stateclass\nclass State:\n  count: int\n</code></pre> <p>Note: you can re-use state across pages. See how the above example uses the <code>State#count</code> value across pages.</p>"},{"location":"guides/state_management/","title":"State Management","text":"<p>State management is a critical element of building interactive apps because it allows you store information about what the user did in a structured way.</p>"},{"location":"guides/state_management/#basic-usage","title":"Basic usage","text":"<p>You can register a class using the class decorator <code>me.stateclass</code> which is like a dataclass with special powers:</p> <pre><code>@me.stateclass\nclass State:\n  val: str\n</code></pre> <p>You can get an instance of the state class inside any of your Mesop component functions by using <code>me.state</code>:</p> <pre><code>@me.page()\ndef page():\n    state = me.state(State)\n    me.text(state.val)\n</code></pre>"},{"location":"guides/state_management/#how-state-works","title":"How State Works","text":"<p><code>me.stateclass</code> is a class decorator which tells Mesop that this class can be retrieved using the <code>me.state</code> method, which will return the state instance for the current user session.</p> <p>If you are familiar with the dependency injection pattern, Mesop's stateclass and state API is essentially a minimalist dependency injection system which scopes the state object to the lifetime of a user session.</p> <p>Under the hood, Mesop is sending the state back and forth between the server and browser client so everything in a state class must be serializable.</p>"},{"location":"guides/state_management/#multiple-state-classes","title":"Multiple state classes","text":"<p>You can use multiple classes to store state for the current user session.</p> <p>Using different state classes for different pages or components can help make your app easier to maintain and more modular.</p> <pre><code>@me.stateclass\nclass PageAState:\n    ...\n\n@me.stateclass\nclass PageBState:\n    ...\n\n@me.page(path=\"/a\")\ndef page_a():\n    state = me.state(PageAState)\n    ...\n\n@me.page(path=\"/b\")\ndef page_b():\n    state = me.state(PageBState)\n    ...\n</code></pre> <p>Under the hood, Mesop is managing state classes based on the identity (e.g. module name and class name) of the state class, which means that you could have two state classes named \"State\", but if they are in different modules, then they will be treated as separate state, which is what you would expect.</p>"},{"location":"guides/state_management/#nested-state","title":"Nested State","text":"<p>You can also have classes inside of a state class as long as everything is serializable:</p> <pre><code>class NestedState:\n  val: str\n\n@me.stateclass\nclass State:\n  nested: NestedState\n\ndef app():\n  state = me.state(State)\n</code></pre> <p>Note: you only need to decorate the top-level state class with <code>@me.stateclass</code>. All the nested state classes will automatically be wrapped.</p>"},{"location":"guides/state_management/#nested-state-and-dataclass","title":"Nested State and dataclass","text":"<p>Sometimes, you may want to explicitly decorate the nested state class with <code>dataclass</code> because in the previous example, you couldn't directly instantiate <code>NestedState</code>.</p> <p>If you wanted to use NestedState as a general dataclass, you can do the following:</p> <pre><code>@dataclass\nclass NestedState:\n  val: str = \"\"\n\n@me.stateclass\nclass State:\n  nested: NestedState\n\ndef app():\n  state = me.state(State)\n</code></pre> <p>Reminder: because dataclasses do not have default values, you will need to explicitly set default values, otherwise Mesop will not be able to instantiate an empty version of the class.</p> <p>Now, if you have an event handler function, you can do the following:</p> <pre><code>def on_click(e):\n    response = call_api()\n    state = me.state(State)\n    state.nested = NestedState(val=response.text)\n</code></pre> <p>If you didn't explicitly annotate NestedState as a dataclass, then you would get an error instantiating NestedState because there's no initializer defined.</p>"},{"location":"guides/state_management/#tips","title":"Tips","text":""},{"location":"guides/state_management/#set-mutable-default-values-eg-list-correctly","title":"Set mutable default values (e.g. list) correctly","text":"<p>Similar to regular dataclasses which disallow mutable default values, you need to avoid mutable default values such as list and dict for state classes. Allowing mutable default values could lead to erroneously sharing state across users which would be bad!</p> <p>Bad: Setting a mutable field directly on a state class attribute.</p> <pre><code>@me.stateclass\nclass State:\n  x: list[str] = [\"a\"]\n</code></pre> <p>Good: Use dataclasses <code>field</code> method to define a default factory so a new instance of the mutable value is created with each state class instance.</p> <pre><code>from dataclasses import field\n\n@me.stateclass\nclass State:\n  x: list[str] = field(default_factory=lambda: [\"a\"])\n</code></pre>"},{"location":"guides/state_management/#state-performance-issues","title":"State performance issues","text":"<p>Because the state class is serialized and sent back and forth between the client and server, you should try to keep the state class reasonably sized. For example, if you store a very large string (e.g. base64-encoded image) in state, then it will degrade performance of your Mesop app. Instead, you should try to store large data outside of the state class (e.g. in-memory, filesystem, database, external service) and retrieve the data as needed for rendering.</p>"},{"location":"guides/web_security/","title":"Web Security","text":"<p>Mesop by default configures its apps to follow a set of web security best practices.</p>"},{"location":"guides/web_security/#how","title":"How","text":"<p>At a high-level, Mesop is built on top of Angular which provides built-in security protections and Mesop configures a strict Content Security Policy.</p> <p>Specifics:</p> <ul> <li>Mesop APIs do not allow arbitrary JavaScript execution in the main execution context. For example, the markdown component sanitizes the markdown content and removes active HTML content like JavaScript.</li> <li>Mesop's default Content Security Policy prevents arbitrary JavaScript code from executing on the page unless it passes Angular's Trusted Types polices.</li> </ul>"},{"location":"guides/web_security/#iframe-security","title":"Iframe Security","text":"<p>To prevent clickjacking, Mesop apps, when running in prod mode (the default mode used when deployed), do not allow sites from any other origins to iframe the Mesop app.</p> <p>Note: pages from the same origin as the Mesop app can always iframe the Mesop app.</p> <p>If you want to allow a trusted site to iframe your Mesop app, you can explicitly allow list the sources which can iframe your app by configuring the security policy for a particular page.</p>"},{"location":"guides/web_security/#example","title":"Example","text":"<pre><code>import mesop as me\n\n\n@me.page(\n  path=\"/allows_iframed\",\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://google.com\"],\n  ),\n)\ndef app():\n  me.text(\"Test CSP\")\n</code></pre> <p>You can also use wildcards to allow-list multiple subdomains from the same site, such as: <code>https://*.example.com</code>.</p>"},{"location":"internal/architecture/","title":"Architecture","text":"<p>This doc is meant to provide an overview of how Mesop is structured as a framework. It's not necessary to know this information as a developer using Mesop, but if you're developing Mesop's codebase, then this is helpful in laying out the lay of the land.</p> <p>At the heart of Mesop is two subsystems:</p> <ul> <li>A Python server, running on top of Flask.</li> <li>A Web client, built on Angular framework, which wraps various Angular components, particularly Angular Material components.</li> </ul>"},{"location":"internal/architecture/#terminology","title":"Terminology","text":"<ul> <li>Downstream - This refers to the synced version of Mesop inside of Google (\"google3 third-party\"). Although almost all the code is shared between the open-source and internal version of Mesop, there's many considerations in maintaining parity between these two versions, particularly with regards to toolchain.</li> <li>Component vs component instance - A component typically refers to the Python factory function that creates a component instance (e.g. <code>me.box()</code>). A component instance refers to a specific component created by a component function and is represented as a <code>Component</code> proto. Other UI frameworks oftentimes give a different name for an instance (i.e. Element) of a component, but for simplicity and explicitness, I will refer to these instances as component instance or component tree (for the entire tree of component instances) in this doc.</li> </ul>"},{"location":"internal/architecture/#life-of-a-mesop-request","title":"Life of a Mesop request","text":""},{"location":"internal/architecture/#initial-page-load","title":"Initial page load","text":"<p>When a user visits a Mesop application, the following happens:</p> <ol> <li>The user visits a path on the Mesop application, e.g. \"/\" (root path), in their browser.</li> <li>The Mesop client-side web application (Angular) is bootstrapped and sends an <code>InitRequest</code> to the server.</li> <li>The Mesop server responds with a <code>RenderEvent</code> which contains a fully instantiated component tree.</li> <li>The Mesop client renders the component tree. Every Mesop component instance corresponds to 1 or more Angular component instance.</li> </ol>"},{"location":"internal/architecture/#user-interactions","title":"User interactions","text":"<p>If the user interacts with the Mesop application (e.g. click a button), the following happens:</p> <ol> <li>The user triggers a <code>UserEvent</code> which is sent to the server. The UserEvent includes: the application state (represented by the <code>States</code> proto), the event handler id to trigger, the key of the component interacted with (if any), and the payload value (e.g. for checkbox, it's a bool value which represents the checked state of the checkbox).</li> <li>The server does the following:<ol> <li>Runs a first render loop in tracing mode (i.e. instantiate the component tree from the root component of the requested path). This discovers any event handler functions. In the future, this trace can also be used to calculate the before component tree so we can calculate the diff of the component tree to minimize the network payload.</li> <li>Updates the state by feeding the user event to the event handler function discovered in the previous step. <p>Note: there's a mapping layer between the UserEvent proto and the granular Python event type. This provides a nicer API for Mesop developers then the internal proto representation.</p> </li> <li>Runs a second render loop to generate the new component tree given the new state. After the first render loop, each render loop results in a RenderEvent sent to the client.</li> <li>In the streaming case, we may run the render loop and flush it down via Server-Sent Events many times.</li> </ol> </li> <li>The client re-renders the Angular application after receiving each RenderEvent.</li> </ol>"},{"location":"internal/architecture/#python-server","title":"Python Server","text":"<p>Flask is a minimalist Python server framework that conforms to WSGI (Web Server Gateway Interface), which is a Python standard that makes it easy for web servers (oftentimes written in other languages like C++) to delegate requests to a Python web framework. This is particularly important in the downstream case because we rely on an internal HTTP server to serve Mesop applications.</p> <p>For development purposes (i.e. using the CLI), we use Werkzeug, which is a WSGI library included with Flask.</p>"},{"location":"internal/architecture/#web-client","title":"Web Client","text":"<p>Mesop's Web client consists of three main parts:</p> <ul> <li>Core: Includes the root Angular component and singleton services like <code>Channel</code>. This part is fairly small and is the critical glue between the rest of the client layer and the server.</li> <li>Mesop Components: Every Mesop component has its own directory under <code>/components</code> <p>Note: this includes both the Python API and the Angular implementation for developer convenience.</p> </li> <li>Dev Tools: Mesop also comes with a basic set of developer tools, namely the components and log panels. The components panel allows Mesop developers to visualize the component tree. The log panel allows Mesop developers to inspect the application state and component tree values.</li> </ul>"},{"location":"internal/architecture/#static-assets","title":"Static assets","text":"<ul> <li>Using the regular CLI, the web client static assets (i.e. JS binary, CSS, images) are served from the Python server. This simplifies deployment of Mesop applications by reducing version skew issues between the client and server.</li> <li>In uncompiled mode (using the dev CLI), the web client is served from the web devserver. This is convenient because it builds faster than the regular/compiled mode and it allows live-reloading when developing the client codebase.</li> </ul>"},{"location":"internal/architecture/#tooling","title":"Tooling","text":"<p>Outside of the <code>mesop/</code> directory are various tools used to build, test and document the Mesop framework. However, anything needed to actually run a Mesop application should be located within <code>mesop/</code>. The three main tools inside the codebase are:</p> <ul> <li>Build tooling - these are in <code>build_defs/</code> which contains various Bazel <code>bzl</code> files and <code>tools</code> which is forked from the Angular codebase. The build toolchain is described in more detail on the toolchain doc.</li> <li>Component generator - inside <code>generator/</code> is a mini-library and CLI tool to generate Mesop components from existing Angular components, specifically Angular Material, although with some modifications it could support more generic Angular components. The generator modifies the codebase so that nothing in <code>generator/</code> is actually needed when running a Mesop applications.</li> <li>Docs - Mesop's doc site is built using Material for Mkdocs and is what you are looking at right now.</li> </ul>"},{"location":"internal/ci/","title":"CI","text":"<p>We use GitHub actions. For all third-party GitHub actions, we must pin it to a specific hash to comply with internal policies.</p>"},{"location":"internal/contributing/","title":"How-to Contribute","text":"<p>Thanks for looking into contributing to Mesop. There's many ways to contribute to Mesop:</p> <ul> <li>Filing new issues and providing feedback on existing issues</li> <li>Improving our docs</li> <li>Contributing examples</li> <li>Contributing code</li> </ul> <p>All types of contributions are welcome and are a key piece to making Mesop work well as a project.</p>"},{"location":"internal/contributing/#before-you-begin","title":"Before you begin","text":""},{"location":"internal/contributing/#sign-our-contributor-license-agreement","title":"Sign our Contributor License Agreement","text":"<p>Contributions to this project must be accompanied by a Contributor License Agreement (CLA). You (or your employer) retain the copyright to your contribution; this simply gives us permission to use and redistribute your contributions as part of the project.</p> <p>If you or your current employer have already signed the Google CLA (even if it was for a different project), you probably don't need to do it again.</p> <p>Visit https://cla.developers.google.com/ to see your current agreements or to sign a new one.</p>"},{"location":"internal/contributing/#review-our-community-guidelines","title":"Review our community guidelines","text":"<p>This project follows Google's Open Source Community Guidelines.</p>"},{"location":"internal/contributing/#contributing-to-docs","title":"Contributing to docs","text":"<p>If you want to contribute to our docs, please take a look at our docs issues. If you find any of our existing docs confusing or missing key information, please file an issue and we will see how we can improve things. We regularly spend time improving our docs because we know it's a key part of the developer experience.</p>"},{"location":"internal/contributing/#contributing-examples","title":"Contributing examples","text":"<p>One of the best way of helping the Mesop project is to share what you've built! You can either add an example to our demo gallery by adding it to the demo/ directory or you can send us a link to your app running and we will include it in our docs.</p>"},{"location":"internal/contributing/#contributing-code","title":"Contributing code","text":"<p>If you'd like to contribute code, I recommend taking a look at one of our existing \"starter\" issues. These are issues that are good for first-time contributors as they are well-specified.</p> <ul> <li>Setup your dev environment</li> <li>If you're creating a new component, you can follow the new component guide</li> </ul> <p>I recommend reading through the various pages in the contributing section as it will give you a sense of our project's goals.</p> <p>One thing that we focus on is providing an easy-to-understand API with minimal breaking changes so we ask that any API changes are first discussed in an issue. This will help prevent wasted work because we are conservative with changing our APIs.</p>"},{"location":"internal/development/","title":"Development","text":"<p>I recommend following (or at least reading) all the steps in this doc if you plan on actively developing Mesop.</p>"},{"location":"internal/development/#setup","title":"Setup","text":""},{"location":"internal/development/#bazelibazel","title":"Bazel/ibazel","text":"<p>We use Bazel as our build system. Use bazelisk which ensures the right version of Bazel is used for this project.</p> <p>If ibazel breaks, but bazel works, try following these steps</p> <p>TIP: If your build mysteriously fails due to an npm-related error, try running <code>bazel clean --expunge &amp;&amp; rm -rf node_modules</code>. Bazel and Yarn have a cache bug when upgrading npm modules.</p>"},{"location":"internal/development/#commit-hooks","title":"Commit hooks","text":"<ol> <li>Install pre-commit</li> <li>Install pre-commit hooks for this repo: <code>pre-commit install</code></li> </ol>"},{"location":"internal/development/#run-local-development","title":"Run local development","text":"<p>We recommend using this for most Mesop framework development.</p> <pre><code>$ ./scripts/cli.sh\n</code></pre> <p>NOTE: this automatically serves the angular app.</p>"},{"location":"internal/development/#python","title":"Python","text":""},{"location":"internal/development/#third-party-packages-pip","title":"Third-party packages (PIP)","text":"<p>If you update <code>//build_defs/requirements.txt</code>, run:</p> <pre><code>$ bazel run //build_defs:pip_requirements.update\n</code></pre>"},{"location":"internal/development/#venv","title":"venv","text":"<p>To support IDE type-checking (Pylance) in VS Code, we use Aspect's rules_py which generates a venv target.</p> <pre><code>$ bazel run //mesop/cli:cli.venv\n</code></pre> <p>Then, you can activate the venv:</p> <pre><code>$ source .cli.venv/bin/activate\n</code></pre> <p>You will need to setup a symlink to have Python IDE support for protos:</p> <pre><code>$ ./scripts/setup_proto_py_modules.sh\n</code></pre> <p>Check that you're using venv's python:</p> <pre><code>$ which python\n</code></pre> <p>Copy the python interpreter path and paste it into VS Code.</p> <p>Finally, install third-party dependencies.</p> <pre><code>$ pip install -r build_defs/requirements_lock.txt\n</code></pre> <p>NOTE: You may need to run the command with <code>sudo</code> if you get a permission denied error, particularly with \"_distutils_hack\".</p>"},{"location":"internal/development/#commit-hooks_1","title":"Commit hooks","text":"<p>We use pre-commit to automatically format, lint code before committing.</p> <p>Setup:</p> <ol> <li>Install pre-commit.</li> <li>Setup git hook: <code>pre-commit install</code></li> </ol>"},{"location":"internal/development/#docs","title":"Docs","text":"<p>We use Mkdocs Material to generate our docs site.</p> <ol> <li>Activate venv</li> <li><code>mkdocs serve</code></li> </ol>"},{"location":"internal/hot_reload/","title":"Hot Reload","text":"<p>One of Mesop's key benefits is that it provides a fast iteration cycle through hot reload. This means whenever a Mesop developer changes their Mesop app code, their browser window will automaticall reload and execute the new app code while preserving the existing state. This isn't guaranteed to work, for example, if the State class is modified in an incompatible way, but it should work for &gt;90% of the build-edit loops (e.g. tweaking the UI, calling new components).</p>"},{"location":"internal/hot_reload/#how-it-works","title":"How it works","text":"<p>See:https://github.com/google/mesop/pull/211</p>"},{"location":"internal/hot_reload/#design-decisions","title":"Design decisions","text":""},{"location":"internal/hot_reload/#what-to-reload","title":"What to reload","text":"<p>Right now we reload all the modules loaded by the Mesop application. However, this results in a lot of unnecessary modules being reloaded and can be quite slow if there's a heavy set of transitive dependencies.</p> <p>Instead, I'm thinking we can use a heuristic where we calculate the existing package based on the file path passed in and only reload modules which are in the current package or a sub-package. Effectively this is only reloading modules within the target file's subtree.</p> <p>This seems like a pretty reasonable heuristic where it reloads all the application modules without reloading the entire dependency graph. Previously I tried reloading only the module passed in via <code>--path</code>, however this was too limiting as it meant shared code (e.g. a navmenu) would not get hot-reloaded.</p>"},{"location":"internal/hot_reload/#when-to-reload","title":"When to reload","text":"<p>With the previous design decision, re-executing a module should be much faster, but we still need to guard against the case where the live reload occurs too quickly in the client side. Options:</p> <ul> <li>Wait a fixed timeout - A simple heuristic could just be to wait 500ms since in theory, all the application code (with the non-application dependnecies cached) should re-execute fairly quickly.</li> <li>Client retry/reload - Another approach could be to retry a client-side reload N times (e.g. 3) if we get an error. The pattern could be: 1. save state to local storage, 2. trigger reload, 3. if reload results in a successful render, we clear the state OR if reload results in an error, we trigger a reload (and persist in local storage which retry attempt this is).</li> <li>Server loop - In the common error case where the server is still re-executing the module and the client reloads, it will hit path not found because the path hasn't been registered yet. One way of mitigating this is to simply do a sleep in debug mode. We can even do an exponential backoff for the sleep (e.g. wait 300ms, 900ms, 2700ms).</li> <li>Preferred appproach - given the trade-offs, I think Server loop is the best option as it's relatively simple to implement, robust and doesn't incur a significant delay in the happy case.</li> </ul>"},{"location":"internal/hot_reload/#abstracting-ibazel-specific-details","title":"Abstracting ibazel-specific details","text":"<p>Since Google's internal equivalent of ibazel doesn't work exactly the same, we should treat HotReloadService as an abstract base class and then extend it for Ibazel (and the internal variant).</p>"},{"location":"internal/modes/","title":"Modes","text":"<p>There are two modes that you can run Mesop in.</p>"},{"location":"internal/modes/#development-mode-aka-debug-mode-or-editor-mode","title":"Development mode (aka debug mode or editor mode)","text":"<p>Recommended for developers using Mesop when they are developing the apps locally. This provides good error messages and hot reloading.</p> <ul> <li>How to run: <code>$ ibazel run //mesop/cli -- --path=mesop/mesop/example_index.py</code></li> <li>Angular should run in dev mode.</li> <li>Developer Tools and Visual Editor are available.</li> </ul>"},{"location":"internal/modes/#prod-mode","title":"Prod mode","text":"<p>Recommended when developers deploy applications built with Mesop for public serving. This is optimized for performance and provides less-detailed error messages.</p> <ul> <li>Developer tools aren't available.</li> <li>Angular doesn't run in dev mode.</li> <li>How to run: <code>$ bazel run //mesop/cli -- --path=mesop/mesop/example_index.py --prod</code></li> </ul>"},{"location":"internal/new_component/","title":"New Component","text":""},{"location":"internal/new_component/#how-to","title":"How-to","text":"<pre><code>$ python scripts/scaffold_component.py $component_name\n</code></pre>"},{"location":"internal/new_component/#api-guidelines","title":"API Guidelines","text":"<ul> <li>Make all arguments keyword only by putting <code>*</code> as the initial argument. Keyword argument is more readable, particularly for UI components which will have increasingly more optional arguments over time.</li> <li>Model after existing APIs. For example, if we are wrapping an existing @angular/material component, we will try to mirror their API (within reason). If we are wrapping a native HTML element, we should try to expose a similar API. In some cases, we will look at other UI frameworks like Flutter for inspiration, even though we are not directly wrapping them.</li> <li>Prefer small components. We should try to provide small native components that can be composed by content components in Python. This enables a wider range of use cases.</li> </ul>"},{"location":"internal/new_component/#new-events","title":"New events","text":"<p>Try to reuse the existing events when possible, but you may need to sometimes create a new event.</p> <ol> <li>Define the event class in <code>//mesop/events/{event_name}.py</code></li> <li>In the same file, define an event mapper and register it: <code>runtime().register_event(EventClass, event_mapper)</code></li> </ol>"},{"location":"internal/new_component/#potential-exploration-areas","title":"Potential exploration areas","text":"<ul> <li>Code-gen <code>component_renderer</code> using a shell/Python script. Initially, just run the script as-needed, but eventually can run it as part of a BUILD rule (a la @angular/components examples)</li> </ul>"},{"location":"internal/publishing/","title":"Publishing","text":"<p>Follow these instructions for releasing a new version of Mesop publicly via PyPI (e.g. <code>pip install mesop</code>).</p> <p>If you haven't done this before, follow the first-time setup.</p>"},{"location":"internal/publishing/#update-version-to-rc","title":"Update version to RC","text":"<p>Update <code>mesop/version.py</code> by incrementing the version number. We follow semver.</p> <p>You want to first create an RC (release candidate) to ensure that it works.</p> <p>For example, if the current version is: <code>0.7.0</code>, then you should increment the version to <code>0.8.0rc0</code> which will create an RC, which is treated as a pre-release by PyPI.</p>"},{"location":"internal/publishing/#install-locally","title":"Install locally","text":"<p>From the workspace root, run the following command:</p> <pre><code>$ source ./scripts/pip.sh\n</code></pre> <p>This will build the Mesop pip package and install it locally so you can test it.</p>"},{"location":"internal/publishing/#testing-locally","title":"Testing locally","text":""},{"location":"internal/publishing/#dev-cli","title":"Dev CLI","text":"<p>The above shell script will run the following command:</p> <pre><code>$ mesop main.py\n</code></pre> <p>This will start the Mesop dev server and you can test that hot reload works.</p>"},{"location":"internal/publishing/#gunicorn-integration","title":"Gunicorn integration","text":"<pre><code>$ pip install gunicorn &amp;&amp; gunicorn main:me\n</code></pre>"},{"location":"internal/publishing/#upload-to-pypi","title":"Upload to PyPI","text":"<p>If the testing above looks good, then continue with uploading to PyPI.</p> <pre><code>rm -rf /tmp/mesoprelease-test/venv-twine \\\n&amp;&amp; virtualenv --python python3 /tmp/mesoprelease-test/venv-twine \\\n&amp;&amp; source /tmp/mesoprelease-test/venv-twine/bin/activate \\\n&amp;&amp; pip install --upgrade pip \\\n&amp;&amp; pip install twine \\\n&amp;&amp; cd /tmp/mesoprelease-test \\\n&amp;&amp; twine upload mesop*.whl\n</code></pre> <p>Visit https://pypi.org/project/mesop/ to see that the new version has been published.</p>"},{"location":"internal/publishing/#test-on-colab","title":"Test on Colab","text":"<p>Because Colab installs from PyPI, you will need to test the RC on Colab after uploading to PyPI.</p> <p>Open our Mesop Colab notebook and run all the cells and make sure it works. Usually if something breaks in Colab, it's pretty obvious because the output isn't displayed, etc.</p>"},{"location":"internal/publishing/#change-the-version-from-rc-to-regular-release","title":"Change the version from RC to regular release","text":"<p>If you find an issue, then redo the above steps and create another RC candidate: <code>0.8.0rc0</code> -&gt; <code>0.8.0rc1</code>.</p> <p>If all the testing looks good, then you can update <code>mesop/version.py</code> and change the version from RC to a regular release, for example:</p> <p><code>0.8.0rc0</code> -&gt; <code>0.8.0</code></p> <p>Re-do the steps above to build, test and upload it to PyPI.</p>"},{"location":"internal/publishing/#first-time-upload-setup","title":"First-time upload setup","text":"<p>Create a file <code>~/.pypirc</code>:</p> <pre><code>[pypi]\n  username = __token__\n  password = {{password}}\n</code></pre> <p>You will need to get a PyPI token generated by one of the project maintainers.</p>"},{"location":"internal/testing/","title":"Testing","text":""},{"location":"internal/testing/#unit-tests","title":"Unit tests","text":"<p>You can run our unit tests using Bazel.</p>"},{"location":"internal/testing/#run-tests","title":"Run tests","text":"<pre><code>bazel test //tests/...:all\n</code></pre>"},{"location":"internal/testing/#e2e-tests","title":"E2E tests","text":"<p>We use Playwright as our e2e test framework. Unlike most of the stack, this isn't Bazel-ified although we'd like to eventually do this.</p>"},{"location":"internal/testing/#run-tests_1","title":"Run tests","text":"<pre><code>$ yarn playwright test\n</code></pre>"},{"location":"internal/testing/#debug-tests","title":"Debug tests","text":"<pre><code>$ yarn playwright test --debug\n</code></pre>"},{"location":"internal/toolchain/","title":"Build / Toolchain","text":""},{"location":"internal/toolchain/#context","title":"Context","text":"<p>Because Mesop is a Google open-source project and we want to provide a good integration with Google's internal codebase, Mesop uses Google's build system Bazel.</p> <p>Although Bazel is similar to the internal tool, there's numerous differences, particularly around the ecosystems, which makes it quite a challenge to maintain Mesop for both open-source and internal builds. Nevertheless, it's important that we do this to serve both communities well.</p>"},{"location":"internal/toolchain/#differences","title":"Differences","text":"<p>We try to isolate as much of the differences between these two environments into the <code>build_defs/</code> directory. Different versions of the same files inside <code>build_defs/</code> are maintained for each environment. In particular, <code>build_defs/defaults.bzl</code> is meant to wrap all external rules/macros used by Mesop so we can swap it between the internal and external variants as needed.</p> <p>Finally, all external dependencies, e.g. Python's <code>requirement('$package')</code> or NPM's <code>@npm//$package</code>, are referenced via an indirection to build_defs/defaults.bzl. This is because Google has a special approach to handling third-party dependencies.</p>"},{"location":"internal/toolchain/#gotchas","title":"Gotchas","text":"<p>Here's a quick list of gotchas to watch out for:</p> <ul> <li>Do not use <code>import * as</code> when importing protos from TS. This prevents tree-shaking downstream.</li> <li>Do not use any external Bazel references (e.g. <code>@</code>) within <code>mesop/</code>. Instead, reference them indirectly using a wrapper in <code>build_defs/</code>.</li> <li>Avoid relying on implicit transitive dependencies, particularly for TS/NG modules.</li> <li>Do not use raw <code>JSON.parse</code>, instead use <code>jsonParse</code> in <code>strict_types.ts</code>.</li> </ul>"},{"location":"internal/toolchain/#angular","title":"Angular","text":"<p>We rely heavily on Angular's toolchain, particularly around Bazel integration. Many of the Web-related Bazel rules, particularly for Angular/TS code was forked from github.com/angular/components.</p>"},{"location":"internal/type_checking/","title":"Type Checking","text":""},{"location":"internal/type_checking/#python-type-checking","title":"Python Type Checking","text":"<p>For our Python code, we use pyright as our static type checker because it has excellent IDE support in VS Code via pylance.</p> <p>To run Python type-checking, run:</p> <pre><code>$ ./scripts/run_py_typecheck.sh\n</code></pre> <p>This will setup the pre-requisites needed for type-checking.</p>"},{"location":"web_components/","title":"Web Components","text":"<p>Note: Web components are a new experimental feature released under labs and may have breaking changes.</p> <p>Mesop allows you to define custom components with web components which is a set of web standards that allows you to use JavaScript and CSS to define custom HTML elements.</p>"},{"location":"web_components/#use-cases","title":"Use cases","text":"<ul> <li> <p>Custom JavaScript - You can execute custom JavaScript and have simple bi-directional communication between the JavaScript code running in the browser and the Python code running the server.</p> </li> <li> <p>JavaScript libraries - If you want to use a JavaScript library, you can wrap them with a web component.</p> </li> <li> <p>Rich-client side interactivity - You can use web components to deliver stateful client-side interactions without a network roundtrip.</p> </li> </ul>"},{"location":"web_components/#anatomy-of-a-web-component","title":"Anatomy of a web component","text":"<p>Mesop web component consists of two parts:</p> <ul> <li>Python module - defines a Python API so that your Mesop app can use the web component seamlessly.</li> <li>JavaScript module - implements the web component.</li> </ul>"},{"location":"web_components/#next-steps","title":"Next steps","text":"<p>Learn how to build your first web component in the quickstart page.</p>"},{"location":"web_components/api/","title":"Web Components API","text":"<p>Note: Web components are a new experimental feature released under labs and may have breaking changes.</p> <p>Example usage:</p> <pre><code>import mesop.labs as mel\n\n\n@mel.web_component(...)\ndef a_web_component():\n    mel.insert_web_component(...)\n</code></pre>"},{"location":"web_components/api/#api","title":"API","text":""},{"location":"web_components/api/#mesop.labs.web_component.web_component","title":"<code>web_component</code>","text":"<p>A decorator for defining a web component.</p> <p>This decorator is used to define a web component. It takes a path to the JavaScript file of the web component and an optional parameter to skip validation. It then registers the JavaScript file in the runtime.</p> PARAMETER DESCRIPTION <code>path</code> <p>The path to the JavaScript file of the web component.</p> <p> TYPE: <code>str</code> </p> <code>skip_validation</code> <p>If set to True, skips validation. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"web_components/api/#mesop.labs.insert_web_component","title":"<code>insert_web_component</code>","text":"<p>Inserts a web component into the current component tree.</p> PARAMETER DESCRIPTION <code>name</code> <p>The name of the web component. This should match the custom element name defined in JavaScript.</p> <p> TYPE: <code>str</code> </p> <code>events</code> <p>A dictionary where the key is the event name, which must match a web component property name defined in JavaScript.       The value is the event handler (callback) function.       Keys must not be \"src\", \"srcdoc\", or start with \"on\" to avoid web security risks.</p> <p> TYPE: <code>dict[str, Callable[[WebEvent], Any]] | None</code> DEFAULT: <code>None</code> </p> <code>properties</code> <p>A dictionary where the key is the web component property name that's defined in JavaScript and the value is the            property value which is plumbed to the JavaScript component.            Keys must not be \"src\", \"srcdoc\", or start with \"on\" to avoid web security risks.</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>A unique identifier for the web component. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"web_components/api/#mesop.labs.WebEvent","title":"<code>WebEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>MesopEvent</code></p> <p>An event emitted by a web component.</p> ATTRIBUTE DESCRIPTION <code>value</code> <p>The value associated with the web event.</p> <p> TYPE: <code>Any</code> </p> <code>key</code> <p>key of the component that emitted this event.</p> <p> TYPE: <code>str</code> </p>"},{"location":"web_components/api/#mesop.slot","title":"<code>slot</code>","text":"<p>This function is used when defining a content component to mark a place in the component tree where content can be provided by a child component.</p>"},{"location":"web_components/quickstart/","title":"Quickstart","text":"<p>Note: Web components are a new experimental feature released under labs and may have breaking changes.</p> <p>You will learn how to build your first web component step-by-step, a counter component.</p> <p>Although it's a simple example, it will show you the core APIs of defining your own web component and how to support bi-directional communication between the Python code running on the server and JavaScript code running on the browser.</p>"},{"location":"web_components/quickstart/#python-module","title":"Python module","text":"<p>Let's first take a look at the Python module which defines the interface so that the rest of your Mesop app can call the web component in a Pythonic way.</p> counter_component.py<pre><code>from typing import Any, Callable\n\nimport mesop.labs as mel\n\n\n@mel.web_component(path=\"./counter_component.js\")\ndef counter_component(\n  *,\n  value: int,\n  on_decrement: Callable[[mel.WebEvent], Any],\n  key: str | None = None,\n):\n  return mel.insert_web_component(\n    name=\"quickstart-counter-component\",\n    key=key,\n    events={\n      \"decrementEvent\": on_decrement,\n    },\n    properties={\n      \"value\": value,\n    },\n  )\n</code></pre> <p>The first part you will notice is the decorator: <code>@mel.web_component</code>. This annotates a function as a web component and specifies where the corresponding JavaScript module is located, relative to the location of this Python module.</p> <p>We've defined the function parameters just like a regular Python function.</p> <p>Tip: We recommend annotating your parameter with types because Mesop will do runtime validation which will catch type issues earlier.</p> <p>Finally, we call the function <code>mel.insert_web_component</code> with the following arguments:</p> <ul> <li><code>name</code> - This is the web component name and must match the name defined in the JavaScript module.</li> <li><code>key</code> - Like all components, web components accept a key which is a unique identifier. See the component key docs for more info.</li> <li><code>events</code> - A dictionary where the key is the event name. This must match a property name, defined in JavaScript. The value is the event handler (callback) function.</li> <li><code>properties</code> - A dictionary where the key is the property name that's defined in JavaScript and the value is the property value which is plumbed to the JavaScript component.</li> </ul> <p>Note: Keys for events and properties must not be \"src\", \"srcdoc\", or start with \"on\" to avoid web security risks.</p> <p>In summary, when you see a string literal, it should match something on the JavaScript side which is explained next.</p>"},{"location":"web_components/quickstart/#javascript-module","title":"JavaScript module","text":"<p>Let's now take a look at how we implement in the web component in JavaScript:</p> counter_component.js<pre><code>import {\n  LitElement,\n  html,\n} from 'https://cdn.jsdelivr.net/gh/lit/dist@3/core/lit-core.min.js';\n\nclass CounterComponent extends LitElement {\n  static properties = {\n    value: {type: Number},\n    decrementEvent: {type: String},\n  };\n\n  constructor() {\n    super();\n    this.value = 0;\n    this.decrementEvent = '';\n  }\n\n  render() {\n    return html`\n      &lt;div class=\"container\"&gt;\n        &lt;span&gt;Value: ${this.value}&lt;/span&gt;\n        &lt;button id=\"decrement-btn\" @click=\"${this._onDecrement}\"&gt;\n          Decrement\n        &lt;/button&gt;\n      &lt;/div&gt;\n    `;\n  }\n\n  _onDecrement() {\n    this.dispatchEvent(\n      new MesopEvent(this.decrementEvent, {\n        value: this.value - 1,\n      }),\n    );\n  }\n}\n\ncustomElements.define('quickstart-counter-component', CounterComponent);\n</code></pre> <p>In this example, we have used Lit which is a small library built on top of web standards in a simple, secure and declarative manner.</p> <p>Note: you can write your web components using any web technologies (e.g. TypeScript) or frameworks as long as they conform to the interface defined by your Python module.</p>"},{"location":"web_components/quickstart/#properties","title":"Properties","text":"<p>The static property named <code>properties</code> defines two kinds of properties:</p> <ul> <li>Regular properties - these were defined in the <code>properties</code> argument of <code>insert_web_component</code>. The property name in JS must match one of the <code>properties</code> dictionary key. You also should make sure the Python and JS types are compatible to avoid issues.</li> <li>Event properties - these were defined in the <code>events</code> argument of <code>insert_web_component</code>. The property name in JS must match one of the <code>events</code> dictionary key. Event properties are always type <code>String</code> because the value is a handler id which identifies the Python event handler function.</li> </ul>"},{"location":"web_components/quickstart/#triggering-an-event","title":"Triggering an event","text":"<p>To trigger an event in your component, let's look at the <code>_onDecrement</code> method implementation:</p> <pre><code>this.dispatchEvent(\n  new MesopEvent(this.decrementEvent, {\n    value: this.value - 1,\n  }),\n);\n</code></pre> <p><code>this.dispatchEvent</code> is a standard web API where a DOM element can emit an event. For Mesop web components, we will always emit a <code>MesopEvent</code> which is a class provided on the global object (<code>window</code>). The first argument is the event handler id so Mesop knows which Python function to call as the event handler and the second argument is the payload which is a JSON-serializable value (oftentimes an object) that the Python event handler can access.</p>"},{"location":"web_components/quickstart/#learn-more-about-lit","title":"Learn more about Lit","text":"<p>I didn't cover the <code>render</code> function which is a standard Lit method. I recommend reading through Lit's docs which are excellent ahd have interactive tutorials.</p>"},{"location":"web_components/quickstart/#using-the-component","title":"Using the component","text":"<p>Finally, let's use the web component we defined. When you click on the decrement button, the value will decrease from 10 to 9 and so on.</p> counter_component_app.py<pre><code>from pydantic import BaseModel\n\nimport mesop as me\nimport mesop.labs as mel\nfrom mesop.examples.web_component.quickstart.counter_component import (\n  counter_component,\n)\n\n\n@me.page(\n  path=\"/web_component/quickstart/counter_component_app\",\n)\ndef page():\n  counter_component(\n    value=me.state(State).value,\n    on_decrement=on_decrement,\n  )\n\n\n@me.stateclass\nclass State:\n  value: int = 10\n\n\nclass ChangeValue(BaseModel):\n  value: int\n\n\ndef on_decrement(e: mel.WebEvent):\n  # Creating a Pydantic model from the JSON value of the WebEvent\n  # to enforce type safety.\n  decrement = ChangeValue(**e.value)\n  me.state(State).value = decrement.value\n</code></pre> <p>Even though this was a toy example, you've learned how to build a web component from scratch which does bi-directional communication between the Python server and JavaScript client.</p>"},{"location":"web_components/quickstart/#next-steps","title":"Next steps","text":"<p>To learn more, read the API docs or look at the examples.</p>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/archive/2023/","title":"2023","text":""}]}